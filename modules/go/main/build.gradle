/*------------------------------------------------------------------------------
  Plugins DSL block
  https://docs.gradle.org/current/userguide/plugins.html#sec:plugins_block
------------------------------------------------------------------------------*/
plugins {
  id 'maven-publish' // See: https://docs.gradle.org/current/userguide/publishing_maven.html
}

/*------------------------------------------------------------------------------
  Local sub-project properties
------------------------------------------------------------------------------*/
description = 'The Nyx main library and entry point.'
ext { 
  modulePath = 'github.com/mooltiverse/nyx/modules/go/main'

  // The list of maps of target platforms (taken from https://go.dev/doc/install/source#environment)
  // For each item you have a sub list with 3 elements: the Operating System, the Architecture, the expected Extension of executable files
  targetPlatforms = [ ['darwin','amd64',''],
                      ['darwin','arm64',''],
                      ['dragonfly','amd64',''],
                      ['freebsd','386',''],
                      ['freebsd','amd64',''],
                      ['freebsd','arm',''],
                      ['linux','386',''],
                      ['linux','amd64',''],
                      ['linux','arm',''],
                      ['linux','arm64',''],
                      ['linux','ppc64',''],
                      ['linux','ppc64le',''],
                      ['linux','mips',''],
                      ['linux','mipsle',''],
                      ['linux','mips64',''],
                      ['linux','mips64le',''],
                      ['netbsd','386',''],
                      ['netbsd','amd64',''],
                      ['netbsd','arm',''],
                      ['openbsd','386',''],
                      ['openbsd','amd64',''],
                      ['openbsd','arm',''],
                      ['openbsd','arm64',''],
                      ['solaris','amd64',''],
                      ['windows','386','.exe'],
                      ['windows','amd64','.exe'],
                      ['windows','arm','.exe'],
                      ['windows','arm64','.exe'] ]
}

/*------------------------------------------------------------------------------
  Configurations
------------------------------------------------------------------------------*/
configurations {
}

/*------------------------------------------------------------------------------
  Repositories and dependencies
  https://docs.gradle.org/current/userguide/dependency_management_for_java_projects.html
*/
dependencies {
}

/*------------------------------------------------------------------------------
  Publications
------------------------------------------------------------------------------*/
publishing {
    repositories {
        // The GitHub Packages repository, visible at https://github.com/mooltiverse/nyx/packages
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/"+nyxOrganizationID+"/"+nyxID)
            credentials {
                // The 'gitHubUser' and 'gitHubToken' variables are passed as credentials fetching them in GitHub Actions as 'secrets.GITHUB_ACTOR' and 'secrets.GITHUB_TOKEN', respectively.
                // See the GitHub Actions definition for more.
                username = findProperty("gitHubUser")
                password = findProperty("gitHubToken")
            }
        }
    }

    // Publications are created dynamically for each target platform (see below)
    //publications {
    //}
}

/*------------------------------------------------------------------------------
  Additional tasks
------------------------------------------------------------------------------*/
// For each target platform:
// - create a publication for the specific binary
// - create a build task for the specific binary
targetPlatforms.each { platformItem ->
    def os = platformItem[0]
    def arch = platformItem[1]
    def extension = platformItem[2]
    def platform = os+'-'+arch
    def binaryName = rootProject.name+'-'+platform
    def binaryFile = file(buildDir.path+'/bin/'+binaryName+extension)

    // The maven publication for the specific platform
    publishing.publications {
        "$binaryName"(MavenPublication) {
            groupId = 'bin'
            artifactId = "$binaryName"
            version = rootProject.version
            artifacts = [ file(binaryFile) ]

            pom {
                name = "$binaryName"
                description = "$binaryName $rootProject.version"
                url = nyxHomeURL
                licenses {
                    license {
                        name = nyxLicenseName
                        url = nyxLicenseURL
                    }
                }
                developers {
                    developer {
                        id = nyxID
                        name = nyxTeamName
                        email = nyxTeamEmail
                        organization = nyxOrganizationName
                        organizationUrl = nyxOrganizationURL
                    }
                }
                scm {
                    connection = nyxGitURL
                    developerConnection = nyxGitURL
                    url = nyxHomeURL
                }
            }
        }   
    }

    // The build task for the specific platform
    tasks.create(group: 'build', name: "goBuild-${binaryName}", description: "Builds the ${binaryName} binary file") {
        // Task dependencies
        dependsOn goInit
        
        // Declare inputs and outputs of this task
        outputs.file(binaryFile)

        // See https://golang.org/doc/install/source#environment for variables determining the build platform ans OS
        doLast {
            logger.info('Building Go binaries for '+platform+' to '+binaryFile)
            exec {
                environment 'GOOS', os
                environment 'GOARCH', arch
                workingDir = projectDir
                standardOutput = new ByteArrayOutputStream()
                // if this fails when using the Gradle wrapper you may need to run './gradlew --stop' first in order to get it running again
                commandLine 'go', 'build', '-o', binaryFile, '-ldflags=.="-X=main.release='+rootProject.version+'"', modulePath
                ext.output = { return standardOutput.toString() }
            }
        }
    }

    // Make the overall goBuild lifecycle task depend on the platform specific build task
    tasks.goBuild.dependsOn tasks.named("goBuild-${binaryName}")
}

/*------------------------------------------------------------------------------
  Additional task dependencies
------------------------------------------------------------------------------*/
tasks.publish.dependsOn tasks.goPublish
