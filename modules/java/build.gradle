/*------------------------------------------------------------------------------
  Plugins DSL block
  https://docs.gradle.org/current/userguide/plugins.html#sec:plugins_block
------------------------------------------------------------------------------*/
plugins {
    id 'io.codearte.nexus-staging' version '0.21.2' // See: https://github.com/Codearte/gradle-nexus-staging-plugin/
}

/*------------------------------------------------------------------------------
  Local sub-project properties
------------------------------------------------------------------------------*/
description = 'All the Nyx Java artifacts'

/*------------------------------------------------------------------------------
  This is the configuration for this project and all sub-projects
------------------------------------------------------------------------------*/
allprojects {
    /*------------------------------------------------------------------------------
      Plugins DSL block
      https://docs.gradle.org/current/userguide/plugins.html#sec:plugins_block
    ------------------------------------------------------------------------------*/
    apply plugin: 'java'                 // See: https://docs.gradle.org/current/userguide/java_plugin.html
    apply plugin: 'maven-publish'        // See: https://docs.gradle.org/current/userguide/publishing_maven.html
    apply plugin: 'signing'              // See: https://docs.gradle.org/current/userguide/signing_plugin.html

    /*------------------------------------------------------------------------------
      Repositories and dependencies
      https://docs.gradle.org/current/userguide/dependency_management_for_java_projects.html
    */
    repositories {
        mavenCentral()
    }
    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter:5.6.0'
    }

    /*------------------------------------------------------------------------------
      Extension configurations
    ------------------------------------------------------------------------------*/
    compileJava {
        //options.warnings      = false
        //options.deprecation   = false
        options.compilerArgs  += ["-Xlint:unchecked"]
    }
    compileTestJava {
        //options.warnings      = false
        //options.deprecation   = false
        options.compilerArgs  += ["-Xlint:unchecked"]
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8

        withSourcesJar()
        withJavadocJar()
    }

    javadoc {
        options {
            // Link generated javadocs to external docs
            links 'https://docs.oracle.com/en/java/javase/13/docs/api/'
            links 'https://download.eclipse.org/jgit/site/5.6.0.201912101111-r/apidocs/'
            links 'https://argparse4j.github.io/apidocs/'
            links 'https://docs.gradle.org/current/javadoc/'
            links 'https://junit.org/junit5/docs/current/api/'
        }
    }

    // afterEvaluate is required or some of the sub-projects properties (like project.description) are not available
    afterEvaluate {
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    artifactId = project.name

                    from components.java

                    pom {
                        name = project.name
                        //description = "$project.group:$project.name:$project.version"
                        description = project.description
                        url = nyxHomeURL
                        licenses {
                            license {
                                name = nyxLicenseName
                                url = nyxLicenseURL
                            }
                        }
                        developers {
                            developer {
                                id = nyxID
                                name = nyxTeamName
                                email = nyxTeamEmail
                                organization = nyxOrganizationName
                                organizationUrl = nyxOrganizationURL
                            }
                        }
                        scm {
                            connection = nyxGitURL
                            developerConnection = nyxGitURL
                            url = nyxHomeURL
                        }
                    }
                }
            }

            repositories {
                maven {
                    // This repository is useful to check artifacts and their layout before they are published
                    name = 'mavenLocalBuild'
                    url = "file://${buildDir}/maven/repo"
                }

                maven {
                    // This is the staging repository to MavenCentral
                    // After succesful upload and verification onto this repo artifacts can be released to Maven Central
                    // with the closeAndReleaseRepository task, provided by the Nexus Staging plugin
                    name = 'sonatypeNexusOSS'

                    // Use the right repo, depending on the version type
                    def releaseStagingRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                    def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                    url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releaseStagingRepoUrl

                    credentials {
                        username findProperty("ossrhUsername")
                        password findProperty("ossrhPassword")
                    }
                }
            }
        }

        // PGP artifacts signing before publishing
        // See: https://docs.gradle.org/current/userguide/signing_plugin.html
        // In order to generate the keypair:
        // 1. install gpg (see https://gnupg.org/). Note that while there is a version for Windows, these instructions apply
        //    to the Linux version, and the two have a few differences.
        // 2. define a strong passphrase
        // 3. generate a key pair using the passphrase you have chosen and a valid id and email. In our case the name is
        //    'Mooltiverse Nyx Project and the email 'nyx.project@mooltiverse.com'.
        //    For other values just use the defaults (RSA 2048):
        //      $ gpg --gen-key
        //      gpg: checking the trustdb
        //      gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
        //      gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u
        //      pub   2048R/AA42BF82 2020-02-28
        //      Key fingerprint = F93C B38B 5F19 BE68 11CB  B16C 4FC3 053A AA42 BF82
        //      uid                  Mooltiverse Nyx Project <nyx.project@mooltiverse.com>
        //      sub   2048R/7EE0E228 2020-02-28
        // 4. double check to see the generated keys:
        //      $ gpg --list-keys
        //      /home/user/.gnupg/pubring.gpg
        //      -----------------------------
        //      pub   2048R/AA42BF82 2020-02-28
        //      uid                  Mooltiverse Nyx Project <nyx.project@mooltiverse.com>
        //      sub   2048R/7EE0E228 2020-02-28
        //
        //    Take note of the Key ID. In this case it's AA42BF82.
        // 5. publish the public key to public servers (note you need the Key ID above):
        //      $ gpg --keyserver hkp://pool.sks-keyservers.net --send-keys AA42BF82
        // 6. make sure the key is available on the public servers:
        //      $ gpg --keyserver hkp://pool.sks-keyservers.net --search-keys AA42BF82
        // 7. export the secret keys as ASCII armor (keep it safe, even if it's protected by the passphrase). The exported key
        //    will be used, along with the passphrase (and Key ID), to set a property or an environment variable when
        //    signing the artifacts to publish. If using it from a text file the command would be:
        //      $ gpg --armor --export-secret-key AA42BF82 > ~/.gnupg/seckey.asc
        //    however we need to use the key from a property or an environment variable and this requires some escaping or
        //    encoding to preserve the newline. The simplest method is to just replace newlines with the '\n' sequence. In
        //    this case just use the command:
        //      $ gpg --armor --export-secret-key AA42BF82 | awk 'NR == 1 { print "" } 1' ORS='\\n' > ~/.gnupg/seckey.asc
        //    The content of the seckey.asc file, in this case, works well when passed as a property but not as an
        //    environment variable as many platforms will try to decode themselves the '\n' sequence.
        //    So the third option, the safest, is to use base64 encoding using the command:
        //      $ gpg --armor --export-secret-key AA42BF82 | base64 -w 0 > ~/.gnupg/seckey.asc
        //    This way the content of the seckey.asc is safe (note the -w 0 option to disable line wrapping). The only
        //    downside is that before using the value we need to decode it from base64.
        //    Since it's the safest (and more portable), we are using this method.
        // 9. take the entire content of the 'seckey.asc' file to set the 'ORG_GRADLE_PROJECT_signingKeyBase64' environment
        //    variable. See below about the usage of such variable.
        //
        // For more see:
        // - https://central.sonatype.org/pages/working-with-pgp-signatures.html
        // - https://maven.apache.org/repository/guide-central-repository-upload.html
        // - https://stackoverflow.com/questions/1251999/how-can-i-replace-a-newline-n-using-sed/14853319#14853319
        signing {
            // With the keypair created as per the instructions above we can sign the artifacts to publish.
            // However we don't want the passphrase or the private key (even if it's protected by the passphrase) stored
            // in cleartext files or publicly available on the Git repo so we use variables in the CI/CD environments to
            // store them.
            // By using the 'findProperty' we can fetch those values from environment variables named:
            // - ORG_GRADLE_PROJECT_signingKeyBase64: we use this base 64 encoded version instead of the plain
            //   ORG_GRADLE_PROJECT_signingKey to make it safer and more portable, avoiding escaping and transcoding issues
            //   about newlines (see comments above about this).
            // - ORG_GRADLE_PROJECT_signingPassword
            //
            // For more see:
            // - https://docs.gradle.org/current/userguide/signing_plugin.html#sec:in-memory-keys

            // The signingKey is set by base64 decoding the value of signingKeyBase64 (i.e. from the environment variable
            // ORG_GRADLE_PROJECT_signingKeyBase64)
            // It's available only on CI/CD configurations allowed to sign and publish, otherwise it's null
            def signingKeyBase64 = findProperty("signingKeyBase64")
            def signingKey = signingKeyBase64 == null ? "" : new String(signingKeyBase64.decodeBase64())
            // The signingPassword is taken from a property or the environment variable ORG_GRADLE_PROJECT_signingPassword
            def signingPassword = findProperty("signingPassword")

            def signingCredentialsAvailable = (signingKey != null) && (signingPassword != null)

            useInMemoryPgpKeys(signingKey, signingPassword)

            // Sign only for release and prerelease versions
            required { (isReleaseVersion || isPrereleaseVersion) && signingCredentialsAvailable && gradle.taskGraph.hasTask("publish") }

            //sign publishing.publications.mavenJava
            sign publishing.publications
        }
    }

    /*------------------------------------------------------------------------------
      Additional task dependencies
    ------------------------------------------------------------------------------*/
    tasks.build.dependsOn tasks.javadoc
}

/*------------------------------------------------------------------------------
  This is the configuration for all sub-projects, but not this project
------------------------------------------------------------------------------*/
subprojects {
    /*------------------------------------------------------------------------------
      Plugins DSL block
      https://docs.gradle.org/current/userguide/plugins.html#sec:plugins_block
    ------------------------------------------------------------------------------*/
    apply plugin: 'jacoco'               // See: https://docs.gradle.org/current/userguide/jacoco_plugin.html

    //apply plugin: 'checkstyle'         // See: https://docs.gradle.org/current/userguide/checkstyle_plugin.html
    //apply plugin: 'pmd'                // See: https://docs.gradle.org/current/userguide/pmd_plugin.html

    /*------------------------------------------------------------------------------
      Extension configurations
    ------------------------------------------------------------------------------*/
    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    jacocoTestReport {
        reports {
            html.enabled true
            xml.enabled true
        }
    }

    /*------------------------------------------------------------------------------
      Additional task dependencies
    ------------------------------------------------------------------------------*/
    tasks.test.finalizedBy tasks.jacocoTestReport
}

/*------------------------------------------------------------------------------
  This is the configuration for this project only
------------------------------------------------------------------------------*/

// For this all-inclusive project, alter the sources and classpath of the 'javadoc' task and the 'sourcesJar' task
// created by (java.withSourcesJar()) so that they include sources from all sub-projets
javadoc.source(subprojects.collect { it.sourceSets.main.allJava })
javadoc.classpath = files(subprojects.collect { it.sourceSets.main.compileClasspath })
sourcesJar.from(subprojects.collect { it.sourceSets.main.allJava })

nexusStaging {
    // You can inspect the repo at https://oss.sonatype.org/index.html#stagingRepositories
    username findProperty("ossrhUsername")
    password findProperty("ossrhPassword")
    packageGroup = 'com.mooltiverse'
}

/*------------------------------------------------------------------------------
  Additional tasks
------------------------------------------------------------------------------*/
// See: https://docs.gradle.org/current/javadoc/org/gradle/api/plugins/JavaPluginExtension.html#withJavadocJar--
task javadocPrivate(type: Javadoc) {
    group = 'Documentation'
    description = 'Generates an additional global javadoc from all the modules with the private visibility (useful for development of this same project only)'
    source subprojects.collect { it.sourceSets.main.allJava }
    classpath = files(subprojects.collect { it.sourceSets.main.compileClasspath })
    options.memberLevel = JavadocMemberLevel.PRIVATE
    options.links 'https://docs.oracle.com/en/java/javase/13/docs/api/'
    options.links 'https://download.eclipse.org/jgit/site/5.6.0.201912101111-r/apidocs/'
    options.links 'https://argparse4j.github.io/apidocs/'
    options.links 'https://docs.gradle.org/current/javadoc/'
    options.links 'https://junit.org/junit5/docs/current/api/'
    destinationDir = file("${project.docsDir}/javadoc-private")
}

/*------------------------------------------------------------------------------
  Additional task dependencies
------------------------------------------------------------------------------*/
tasks.build.dependsOn tasks.javadocPrivate
// after successful publishing close the Nexus repository and release it to Maven Central (it takes a few minutes)
tasks.publish.finalizedBy tasks.closeAndReleaseRepository