/*------------------------------------------------------------------------------
  Plugins DSL block
  https://docs.gradle.org/current/userguide/plugins.html#sec:plugins_block
------------------------------------------------------------------------------*/
plugins {
    /* Since we use Sonatype Nexus OSS to stage the Maven publications before they are released to Maven Central we
     * can't simply use the 'maven-publish' plugin because of some (pointless) peculiarities of Sonatype's Nexus that
     * cause error often times. These errors usually drive to:
     * - staging repository fragmented into several repositories
     * - timeouts occurring during connecctions
     * - subsequent invocation of the 'closeAndReleaseRepository' task from the 'io.codearte.nexus-staging' plugin to
     *   fail with errors
     * Moreover, Sonatype Nexus is extremely slow in accepting and processing the content (it often takes several
     * minutes) and this is often the cause of several timeouts.
     * The issues are documented at the Nexus Publish plugin home page (https://github.com/marcphilipp/nexus-publish-plugin/)
     * and, among others, at:
     * - https://github.com/Codearte/gradle-nexus-staging-plugin/issues/76
     * - https://github.com/gradle/gradle/issues/5711#issuecomment-430170888
     * - https://github.com/travis-ci/travis-ci/issues/9555#issuecomment-428799836
     * - https://issues.sonatype.org/browse/OSSRH-6262
     * - https://issues.sonatype.org/browse/OSSRH-5454
     * - https://github.com/researchgate/gradle-release/issues/244#issuecomment-372794864
     *
     * This is why instead of using the 'maven-publish' plugin we need to use the 'de.marcphilipp.nexus-publish' plugin,
     * (which in turn uses the 'maven-publish' but also adds workarounds to it)
     */
    //id 'maven-publish'                                   // See: https://docs.gradle.org/current/userguide/publishing_maven.html
    id 'de.marcphilipp.nexus-publish' version '0.4.0'    // See: https://github.com/marcphilipp/nexus-publish-plugin/
    id 'signing'                                         // See: https://docs.gradle.org/current/userguide/signing_plugin.html
    id 'io.codearte.nexus-staging' version '0.21.2'      // See: https://github.com/Codearte/gradle-nexus-staging-plugin/
}

/*------------------------------------------------------------------------------
  Local sub-project properties
------------------------------------------------------------------------------*/
description = 'All the Nyx Java library artifacts'

/*------------------------------------------------------------------------------
  Extension configurations
------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------
  Publications
------------------------------------------------------------------------------*/
// Maven publications are configured here for all subprojects to grant more consistency when dealing with Sonatype
// Nexus.
// Here we create one Maven publication for each subproject.
subprojects.each {sub ->
    publishing {
        publications {
            "$sub.name"(MavenPublication) {
                artifactId = sub.name
                from sub.components.java

                pom {
                    name = sub.name
                    // sub.description fails to evaluate because it's not yet available when publications are defined
                    description = "$sub.group:$sub.name:$sub.version $sub.description"
                    url = nyxHomeURL
                    licenses {
                        license {
                            name = nyxLicenseName
                            url = nyxLicenseURL
                        }
                    }
                    developers {
                        developer {
                            id = nyxID
                            name = nyxTeamName
                            email = nyxTeamEmail
                            organization = nyxOrganizationName
                            organizationUrl = nyxOrganizationURL
                        }
                    }
                    scm {
                        connection = nyxGitURL
                        developerConnection = nyxGitURL
                        url = nyxHomeURL
                    }
                }
            }
        }
    }
}

publishing {
    publications {
        // The local project (all inclusive java library) publication
        javalib(MavenPublication) {
            artifactId = project.name
            from project.components.java

            pom {
                name = project.name
                // sub.description fails to evaluate because it's not yet available when publications are defined
                description = project.description
                url = nyxHomeURL
                licenses {
                    license {
                        name = nyxLicenseName
                        url = nyxLicenseURL
                    }
                }
                developers {
                    developer {
                        id = nyxID
                        name = nyxTeamName
                        email = nyxTeamEmail
                        organization = nyxOrganizationName
                        organizationUrl = nyxOrganizationURL
                    }
                }
                scm {
                    connection = nyxGitURL
                    developerConnection = nyxGitURL
                    url = nyxHomeURL
                }
            }
        }
    }

    repositories {
        maven {
            // This repository is useful to check artifacts and their layout before they are published
            name = 'mavenLocalBuild'
            url = "file://${buildDir}/maven/repo"
        }

        // The classical Maven repo definition is suspended in favor of the 'sonatype' repository provided by the
        // 'de.marcphilipp.nexus-publish' pugin (see the 'nexusPublishing' extension below)
        /*maven {
            // This is the staging repository to MavenCentral
            name = 'sonatypeNexusOSS'

            // Select the right repo URL, depending on the version type
            def releaseStagingRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releaseStagingRepoUrl

            credentials {
                username findProperty("ossrhUsername")
                password findProperty("ossrhPassword")
            }
        }*/
    }
}

// PGP artifacts signing before publishing
// See: https://docs.gradle.org/current/userguide/signing_plugin.html
// In order to generate the keypair:
// 1. install gpg (see https://gnupg.org/). Note that while there is a version for Windows, these instructions apply
//    to the Linux version, and the two have a few differences.
// 2. define a strong passphrase
// 3. generate a key pair using the passphrase you have chosen and a valid id and email. In our case the name is
//    'Mooltiverse Nyx Project and the email 'nyx.project@mooltiverse.com'.
//    For other values just use the defaults (RSA 2048):
//      $ gpg --gen-key
//      gpg: checking the trustdb
//      gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
//      gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u
//      pub   2048R/AA42BF82 2020-02-28
//      Key fingerprint = F93C B38B 5F19 BE68 11CB  B16C 4FC3 053A AA42 BF82
//      uid                  Mooltiverse Nyx Project <nyx.project@mooltiverse.com>
//      sub   2048R/7EE0E228 2020-02-28
// 4. double check to see the generated keys:
//      $ gpg --list-keys
//      /home/user/.gnupg/pubring.gpg
//      -----------------------------
//      pub   2048R/AA42BF82 2020-02-28
//      uid                  Mooltiverse Nyx Project <nyx.project@mooltiverse.com>
//      sub   2048R/7EE0E228 2020-02-28
//
//    Take note of the Key ID. In this case it's AA42BF82.
// 5. publish the public key to public servers (note you need the Key ID above):
//      $ gpg --keyserver hkp://pool.sks-keyservers.net --send-keys AA42BF82
// 6. make sure the key is available on the public servers:
//      $ gpg --keyserver hkp://pool.sks-keyservers.net --search-keys AA42BF82
// 7. export the secret keys as ASCII armor (keep it safe, even if it's protected by the passphrase). The exported key
//    will be used, along with the passphrase (and Key ID), to set a property or an environment variable when
//    signing the artifacts to publish. If using it from a text file the command would be:
//      $ gpg --armor --export-secret-key AA42BF82 > ~/.gnupg/seckey.asc
//    however we need to use the key from a property or an environment variable and this requires some escaping or
//    encoding to preserve the newline. The simplest method is to just replace newlines with the '\n' sequence. In
//    this case just use the command:
//      $ gpg --armor --export-secret-key AA42BF82 | awk 'NR == 1 { print "" } 1' ORS='\\n' > ~/.gnupg/seckey.asc
//    The content of the seckey.asc file, in this case, works well when passed as a property but not as an
//    environment variable as many platforms will try to decode themselves the '\n' sequence.
//    So the third option, the safest, is to use base64 encoding using the command:
//      $ gpg --armor --export-secret-key AA42BF82 | base64 -w 0 > ~/.gnupg/seckey.asc
//    This way the content of the seckey.asc is safe (note the -w 0 option to disable line wrapping). The only
//    downside is that before using the value we need to decode it from base64.
//    Since it's the safest (and more portable), we are using this method.
// 9. take the entire content of the 'seckey.asc' file to set the 'ORG_GRADLE_PROJECT_signingKeyBase64' environment
//    variable. See below about the usage of such variable.
//
// For more see:
// - https://central.sonatype.org/pages/working-with-pgp-signatures.html
// - https://maven.apache.org/repository/guide-central-repository-upload.html
// - https://stackoverflow.com/questions/1251999/how-can-i-replace-a-newline-n-using-sed/14853319#14853319
signing {
    // With the keypair created as per the instructions above we can sign the artifacts to publish.
    // However we don't want the passphrase or the private key (even if it's protected by the passphrase) stored
    // in cleartext files or publicly available on the Git repo so we use variables in the CI/CD environments to
    // store them.
    // By using the 'findProperty' we can fetch those values from environment variables named:
    // - ORG_GRADLE_PROJECT_signingKeyBase64: we use this base 64 encoded version instead of the plain
    //   ORG_GRADLE_PROJECT_signingKey to make it safer and more portable, avoiding escaping and transcoding issues
    //   about newlines (see comments above about this).
    // - ORG_GRADLE_PROJECT_signingPassword
    //
    // For more see:
    // - https://docs.gradle.org/current/userguide/signing_plugin.html#sec:in-memory-keys

    // The signingKey is set by base64 decoding the value of signingKeyBase64 (i.e. from the environment variable
    // ORG_GRADLE_PROJECT_signingKeyBase64)
    // It's available only on CI/CD configurations allowed to sign and publish, otherwise it's null
    def signingKeyBase64 = findProperty("signingKeyBase64")
    def signingKey = signingKeyBase64 == null ? "" : new String(signingKeyBase64.decodeBase64())
    // The signingPassword is taken from a property or the environment variable ORG_GRADLE_PROJECT_signingPassword
    def signingPassword = findProperty("signingPassword")

    def signingCredentialsAvailable = (signingKey != null) && (signingPassword != null)

    useInMemoryPgpKeys(signingKey, signingPassword)

    // Sign only for release and prerelease versions
    required { (isReleaseVersion || isPrereleaseVersion) && signingCredentialsAvailable && gradle.taskGraph.hasTask("publish") }

    //sign publishing.publications.mavenJava
    sign publishing.publications
}

// Publish to Sonatype Nexus staging
// See: https://github.com/marcphilipp/nexus-publish-plugin/
// Once the content is published to Sonatype Nexus and before it's released to Maven Central you can see the repo using
// the Nexus UI at https://oss.sonatype.org/index.html#stagingRepositories in the Staging Repositories section
nexusPublishing {
    // Sonatype Nexus is so slow that the plugin often needs several minutes to upload (ofter ~5 minutes)
    connectTimeout = java.time.Duration.ofMinutes(10)
    clientTimeout = java.time.Duration.ofMinutes(10)

    repositories {
        packageGroup = 'com.mooltiverse'
        //stagingProfileId = '302fa0a0346251' // see below on how to retrieve this
        sonatype {
            username = findProperty("ossrhUsername")
            password = findProperty("ossrhPassword")
        }
    }
}

// Release from the Sonatype Nexus staging to Maven Central
// Note that after the plugin exits succesfully it may take ~10-15 minutes to get the content visible on Maven Central.
// Once done the content is publicly available at https://repo.maven.apache.org/maven2/com/mooltiverse/oss/nyx/
nexusStaging {
    // Nexus is terribly slow, at times it take more than 100 tries (and ~10-20 minutes) to process
    numberOfRetries = 200

    packageGroup = 'com.mooltiverse'
    //stagingProfileId = '302fa0a0346251' // see below on how to retrieve this
    username findProperty("ossrhUsername")
    password findProperty("ossrhPassword")
}

/*------------------------------------------------------------------------------
  Additional task dependencies
------------------------------------------------------------------------------*/
// Publish artifacts to the staging Sonatype Nexus
tasks.publish.dependsOn tasks.publishToSonatype
// Retrieve and print the stagingProfileId using the getStagingProfile task provided by the
// 'io.codearte.nexus-staging' plugin. The Id is also available at https://oss.sonatype.org/service/local/staging/profiles
// when the browser has an authenticated session to Sonatype Nexus
tasks.publishToSonatype.dependsOn tasks.getStagingProfile
// After successful publishing to the staging Sonatype Nexus repository release it to Maven Central
// (it may take ~10-20 minutes)
tasks.publish.finalizedBy tasks.closeAndReleaseRepository


