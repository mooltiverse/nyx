name: "Setup Nyx"
description: |-
  Run the common tasks to setup a Nyx environment from scratch or restoring
  the environment from a previous job:
  - set up a Nyx cache for sharing the Nyx state files
  - publish the Nyx state files as GitHub Actions artifacts
  Please note that this Action doesn't run any actual command or task other
  than those used to set up the environment. Build commands are to be executed
  after this Action completes.
  Also note that this Action uses a Docker Action that is only supported on
  Linux runners so in case you just need the cache to be restored you can
  skip running the actual action by setting 'enable-action' to 'false'.
  Most outputs won't be available when 'enable-action' is 'false'
inputs:
  verbosity:
    description: |-
      Sets the verbosity level to adjust the output logs verbosity.
      Allowed values are: 'error', 'warning', 'quiet', 'info', 'debug'.
      Default: quiet
    required: false
    default: 'quiet'
  enable-action:
    description: |-
      Whether to enable running the underlying Action or not.
      Consider that the underlying action is only supported on Linux runners
      so disabling the Action might be useful when running on other runners
      when you just need the other tasks to be performed (i.e. restoring
      the cache).
      Most outputs are only available when the Actions is enabled.
      Default: true
    required: false
    default: 'true'
  enable-cache:
    description: |-
      Whether to enable the cache.
      Default: true
    required: false
    default: 'true'
  cache-name-prefix:
    description: |-
      The prefix of the name to use for the cache that will be read and/or
      written by this Action.
      If the cache to read does not exists a new one will be created from
      scratch without errors.
      Default: nyx-\$\{\{ github.run_id \}\}
    required: false
    default: 'nyx-${{ github.run_id }}'
  cache-name-suffix:
    description: |-
      The suffix of the name to use for the cache that will be written by this
      Action.
      If the cache to read does not exists a new one will be created from
      scratch without errors.
      In case you want multiple jobs share the same artifacts you can either
      set this value to a generic identifier (which might as well be the
      name of the job that bootstrapped the cache), using the same in all jobs,
      or even leave it empty. What's important for sharing the same artifacts
      is that all jobs use the same value for this attribute, so they use the
      same cache instance.
      Remember, though, that regardless of which job writes the cache, the same
      entry (file) can only be written once in the cache so this means that
      jobs may add new entries but not overwrite existing ones with new versions.
      In the other case, when you need jobs to write new versions of files, you
      need chaining caches, which means one job creates the first cache, then
      others need to read from the previous cache version and create a new cache
      with updated contents.
      When chaining caches, this value should be (or at least include) the ID
      of the Job that writes the cache, while the 'cache-name-restore-suffix'
      has the value of the 'cache-name-suffix' of the job to read the previous
      cache from.
      This allows to chain caches in a way that each job writes its own cache,
      while starting from a previous cache written by some other job.
      Default: \$\{\{ github.job \}\}
    required: false
    default: '${{ github.job }}'
  cache-name-restore-suffix:
    description: |-
      The suffix of the name to use for the cache that will be read by this
      Action.
      If the cache to read does not exists a new one will be created from
      scratch without errors.
      In case you want multiple jobs share the same artifacts just use the
      same value here of the 'cache-name-suffix' attribute used in all jobs
      sharing the cache.
      In the other case, when you need jobs to write new versions of files,
      you need chaining caches, which means one job creates the first cache,
      then others need to read from the previous cache version and create a
      new cache with updated contents. In this case this value must be the
      'cache-name-suffix' of the job to read the previous version of the
      cache from. This way you can start from the previous job's cache and
      create a new version.
      By default this value is the same as 'cache-name-suffix' so as long as
      you don't set this value this cache will be read-only.
      Default: \$\{\{ github.job \}\}
    required: false
    default: '${{ github.job }}'
  cache-contents:
    description: |-
      The entries to include in the cache.
      You can use a multi-line value here to specify multiple entries.
      Default:
        build/.nyx-*.*
    required: false
    default: |-
      build/.nyx*.*
  enable-artifacts:
    description: |-
      Whether to enable the publication of artifacts.
      Default: false
    required: false
    default: 'false'
  artifact-name:
    description: |-
      The name to use for the published GitHub Actions artifact containing the
      Nyx state files.
      Default: nyx-\$\{\{ github.job \}\}
    required: false
    default: 'nyx-${{ github.job }}'
  artifact-contents:
    description: |-
      The entries to include in the published GitHub Actions artifact
      containing the Nyx state files.
      You can use a multi-line value here to specify multiple entries.
      Default:
        build/.nyx-summary.txt
        build/.nyx-state.json
    required: false
    default: |-
      build/.nyx-summary.txt
      build/.nyx-state.json
outputs:
  cache-name:
    description: "The name of the cache key"
    value: ${{ inputs.cache-name-prefix }}-${{ inputs.cache-name-suffix }}
  cache-name-suffix:
    description: "The value of the 'cache-name-suffix'"
    value: ${{ inputs.cache-name-suffix }}
  branch:
    description: "This string contains the current Git branch name. Only available when 'enable-action' is 'true.'"
    value: ${{ inputs.enable-cache == 'true' && steps.nyx.outputs.branch || '' }}
  bump:
    description: "This string contains the name of the identifier that has been bumped to create the new version. Only available when 'enable-action' is 'true.'"
    value: ${{ inputs.enable-cache == 'true' && steps.nyx.outputs.bump || '' }}
  coreVersion:
    description: "This value is true when the version only uses core identifiers (i.e. is not a pre-release) according to the scheme. Only available when 'enable-action' is 'true.'"
    value: ${{ inputs.enable-cache == 'true' && steps.nyx.outputs.coreVersion || '' }}
  latestVersion:
    description: "This value is true when the version is the latest in the repository, meaning that, according to the scheme, there are no other tags in the Git repository representing any version greater than version. Only available when 'enable-action' is 'true.'"
    value: ${{ inputs.enable-cache == 'true' && steps.nyx.outputs.latestVersion || '' }}
  newRelease:
    description: "This value is true when the 'newVersion' is true and a new release with the current 'version' has to be issued. Only available when 'enable-action' is 'true.'"
    value: ${{ inputs.enable-cache == 'true' && steps.nyx.outputs.newRelease || '' }}
  newVersion:
    description: "This value is true when the 'version' is new and is basically a shorthand to testing if 'version' is different than the 'previousVersion'. Only available when 'enable-action' is 'true.'"
    value: ${{ inputs.enable-cache == 'true' && steps.nyx.outputs.newVersion || '' }}
  previousVersion:
    description: "The version that was released before the one being created. Only available when 'enable-action' is 'true.'"
    value: ${{ inputs.enable-cache == 'true' && steps.nyx.outputs.previousVersion || '' }}
  primeVersion:
    description: "The version that is used as the baseline when bumping version numbers when the release type uses collapsed versioning (the pre-release versioning). Only available when 'enable-action' is 'true.'"
    value: ${{ inputs.enable-cache == 'true' && steps.nyx.outputs.primeVersion || '' }}
  timestamp:
    description: "The timestamp in the Unix format (seconds since Jan 01 1970. (UTC). Only available when 'enable-action' is 'true.'. Example: '1591802533'."
    value: ${{ inputs.enable-cache == 'true' && steps.nyx.outputs.timestamp || '' }}
  version:
    description: "The version that was inferred. Only available when 'enable-action' is 'true.'"
    value: ${{ inputs.enable-cache == 'true' && steps.nyx.outputs.version || '' }}
runs:
  # Composite GitHub Actions actions require to set 'using': 'composite'
  using: "composite"
  steps:
  - name: Set up the ${{ inputs.cache-name-prefix }}-${{ inputs.cache-name-suffix }} cache
    uses: actions/cache@v4
    if: ${{ inputs.enable-cache == 'true' }}
    with:
      key: ${{ inputs.cache-name-prefix }}-${{ inputs.cache-name-suffix }}
      restore-keys: |-
        ${{ inputs.cache-name-prefix }}-${{ inputs.cache-name-restore-suffix }}
      path: ${{ inputs.cache-contents }}
      enableCrossOsArchive: true
  - name: List the cache contents
    if: ${{ inputs.enable-cache == 'true' && inputs.verbosity == 'debug' }}
    shell: sh
    continue-on-error: true
    run: |
      echo "::group::Cache contents"
      ls -alR ${{ inputs.cache-contents }}
      echo "::endgroup::"
  - name: Log the error message about the Docker Action not being supported on any runners other than Linux
    if: ${{ runner.os != 'Linux' && inputs.enable-action == 'true' }}
    shell: sh
    continue-on-error: true
    run: echo "::error title=The Nyx Action can't run on ${{ runner.os }} runners::Docker Actions are only supported on ${{ runner.os }} runners. Consider setting the 'enable-action' input to 'false' in case you just need the cache to be restored."
  - name: Run Nyx
    # By using the Nyx GitHub Action we are able to load its data that was stored
    # by the previous step into the build/.nyx-state.json and export it to outputs.
    id: nyx
    if: ${{ inputs.enable-action == 'true' }}
    uses: mooltiverse/nyx-github-action@main
  - name: Publish the job artifacts with the Nyx state and summary
    uses: actions/upload-artifact@v4
    if: ${{ inputs.enable-artifacts == 'true' }}
    with:
      name: ${{ inputs.artifact-name }}
      path: ${{ inputs.artifact-contents }}
      include-hidden-files: true
