# The Nyx CI pipeline running on GitHub Actions
#
# The pipeline uses Gradle tasks for each job and in order to make it incremental the cache is used to store
# the various 'build' directories between tasks (considering each job runs on a different fresh node).
# See https://docs.gradle.org/current/userguide/build_cache.html for more on the Gradle Build Cache.
#
# CACHE
# The cache is scoped to the current pipeline so every new pipeline starts with no cache, while each job
# ends by caching its cached outputs so that next jobs can start from there.
# If the cache action finds a stored cache with the given key it pulls when it's setting up but never updates
# it in the post actions. You can see this behavior at the end of a job when it says:
#     Cache hit occurred on the primary key Linux-nyx-gradle-XYZ, not saving cache.
# The problem with this approach if using the same cache key in all jobs is that only the first job updates
# the cache but next jobs always get the cache from the first job, not from next ones.
# To work around this problem each job uses a 'restore-keys' with the key generated from the previous
# job, while its own 'key' is specific (and can be used by next jobs). This produces a chain of caches
# but it's the only way to have the cache incremented at each job.
# To make sure the cache is used take a look at the logs and see the Gradle tasks status (UP-TO-DATE).

on: [push]
# Avoid running multiple pipelines concurrently to avoid overlapping releases and tags
concurrency:
  group: project
  cancel-in-progress: false

jobs:
  assemble:
    runs-on: ubuntu-latest
    steps:
    - name: Git checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Set up Go 1.17
      uses: actions/setup-go@v2
      with:
        go-version: 1.17.6
    # Start with a new empty cache (no restore-keys) and save the job output cache as -assemble
    - name: Set up the pipeline cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          build/
          **/build/
        key: ${{ runner.os }}-nyx-gradle-${{ github.run_id }}-${{ github.job }}
        #restore-keys: not used here, start from scratch
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Assemble with Gradle
      run: ./gradlew assemble --build-cache --stacktrace
    - name: Archive Nyx state file
      uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: .nyx-state-${{ github.job }}.json
        path: build/.nyx-state.json
    - name: Archive Jar
      uses: actions/upload-artifact@v2
      with:
        name: jar
        path: '**/build/libs/'
    - name: Archive Binaries
      uses: actions/upload-artifact@v2
      with:
        name: bin
        path: 'modules/go/main/build/bin/*'
  
  unit-test:
    needs: assemble
    runs-on: ubuntu-latest
    steps:
    - name: Git checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Set up Go 1.17
      uses: actions/setup-go@v2
      with:
        go-version: 1.17.6
    # Start from the -assemble cache and save the job output cache as -unit-test
    - name: Set up the pipeline cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          build/
          **/build/
        key: ${{ runner.os }}-nyx-gradle-${{ github.run_id }}-${{ github.job }}
        restore-keys: |
          ${{ runner.os }}-nyx-gradle-${{ github.run_id }}-assemble
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    # TODO: uncomment this block of instructions
    #- name: Run Unit Tests with Gradle
    #  env:
    #      # See the top level https://github.com/mooltiverse/nyx/blob/master/CONTRIBUTING.md#contributing-code file for details about passing these values when testing locally
    #      ORG_GRADLE_PROJECT_gitHubTestUserToken: ${{ secrets.TEST_GITHUB_USER_TOKEN }}   # The test user token to test Nyx GitHub features
    #      ORG_GRADLE_PROJECT_gitLabTestUserToken: ${{ secrets.TEST_GITLAB_USER_TOKEN }}   # The test user token to test Nyx GitLab features
    #  run: ./gradlew test --build-cache --stacktrace
    - name: Archive Nyx state file
      uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: .nyx-state-${{ github.job }}.json
        path: build/.nyx-state.json
    - name: Archive Test Outputs
      uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: unit-test-reports
        path: |
          **/build/reports/
          **/build/test-results/
  
  # These teets may take a very long time to complete and their cache may easily go over the 5GB
  # limit defined by GitHub Actions. This is why they are in a separate job and the output cache
  # may fail to store at the end (but this won't affect other jobs).
  integration-test:
    needs: assemble
    runs-on: ubuntu-latest
    steps:
    - name: Git checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Set up Go 1.17
      uses: actions/setup-go@v2
      with:
        go-version: 1.17.6
    # Storing the output cache probably fails because the size is over the 5GB. If it fails you
    # see a message like:
    #     Warning: Cache size of ~5456 MB (5720816120 B) is over the 5GB limit, not saving cache.
    # in the 'Post setup the pipeline cache' step of this job.
    # This is not a big deal as the next jobs don't need the output from this one to complete.
    # Start from the -assemble cache and save the job output cache as -integration-test
    - name: Set up the pipeline cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          build/
          **/build/
        key: ${{ runner.os }}-nyx-gradle-${{ github.run_id }}-${{ github.job }}
        restore-keys: |
          ${{ runner.os }}-nyx-gradle-${{ github.run_id }}-assemble
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    # TODO: uncomment this block of instructions
    #- name: Run Integration Tests with Gradle
    #  env:
    #      # See the top level https://github.com/mooltiverse/nyx/blob/master/CONTRIBUTING.md#contributing-code file for details about passing these values when testing locally
    #      ORG_GRADLE_PROJECT_gitHubTestUserToken: ${{ secrets.TEST_GITHUB_USER_TOKEN }}   # The test user token to test Nyx GitHub features
    #      ORG_GRADLE_PROJECT_gitLabTestUserToken: ${{ secrets.TEST_GITLAB_USER_TOKEN }}   # The test user token to test Nyx GitLab features
    #  run: ./gradlew integrationTest --build-cache --stacktrace
    - name: Archive Nyx state file
      uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: .nyx-state-${{ github.job }}.json
        path: build/.nyx-state.json
    # These tests  are still empty so there is no reports to archive and the build produces a warning.
    # Uncomment the following lines when these tests have some output reports to archive.
    #
    #- name: Archive Test Outputs
    #  uses: actions/upload-artifact@v2
    #  if: ${{ always() }}
    #  with:
    #    name: integration-test-reports
    #    path: |
    #      **/build/reports/
    #      **/build/test-results/
  
  # These teets may take a very long time to complete and their cache may easily go over the 5GB
  # limit defined by GitHub Actions. This is why they are in a separate job and the output cache
  # may fail to store at the end (but this won't affect other jobs).
  functional-test:
    needs: assemble
    runs-on: ubuntu-latest
    steps:
    - name: Git checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Set up Go 1.17
      uses: actions/setup-go@v2
      with:
        go-version: 1.17.6
    # Storing the output cache probably fails because the size is over the 5GB. If it fails you
    # see a message like:
    #     Warning: Cache size of ~5456 MB (5720816120 B) is over the 5GB limit, not saving cache.
    # in the 'Post setup the pipeline cache' step of this job.
    # This is not a big deal as the next jobs don't need the output from this one to complete.
    #
    # Start from the -assemble cache and save the job output cache as -functional-test
    - name: Set up the pipeline cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          build/
          **/build/
        key: ${{ runner.os }}-nyx-gradle-${{ github.run_id }}-${{ github.job }}
        restore-keys: |
          ${{ runner.os }}-nyx-gradle-${{ github.run_id }}-assemble
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    # TODO: uncomment this block of instructions
    #- name: Run Functional Tests with Gradle
    #  env:
    #      # See the top level https://github.com/mooltiverse/nyx/blob/master/CONTRIBUTING.md#contributing-code file for details about passing these values when testing locally
    #      ORG_GRADLE_PROJECT_gitHubTestUserToken: ${{ secrets.TEST_GITHUB_USER_TOKEN }}   # The test user token to test Nyx GitHub features
    #      ORG_GRADLE_PROJECT_gitLabTestUserToken: ${{ secrets.TEST_GITLAB_USER_TOKEN }}   # The test user token to test Nyx GitLab features
    #  run: ./gradlew functionalTest --build-cache --stacktrace
    - name: Archive Nyx state file
      uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: .nyx-state-${{ github.job }}.json
        path: build/.nyx-state.json
    - name: Archive Test Outputs
      uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: functional-test-reports
        path: |
          **/build/reports/
          **/build/test-results/

  check:
    needs: [unit-test,integration-test,functional-test]
    runs-on: ubuntu-latest
    steps:
    - name: Git checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Set up Go 1.17
      uses: actions/setup-go@v2
      with:
        go-version: 1.17.6
    # Start from the -unit-test cache and save the job output cache as -check
    - name: Set up the pipeline cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          build/
          **/build/
        key: ${{ runner.os }}-nyx-gradle-${{ github.run_id }}-${{ github.job }}
        restore-keys: |
          ${{ runner.os }}-nyx-gradle-${{ github.run_id }}-unit-test
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    # TODO: uncomment this block of instructions
    #- name: Finalize Tests with Gradle
    #  env:
    #      # See the top level https://github.com/mooltiverse/nyx/blob/master/CONTRIBUTING.md#contributing-code file for details about passing these values when testing locally
    #      ORG_GRADLE_PROJECT_gitHubTestUserToken: ${{ secrets.TEST_GITHUB_USER_TOKEN }}   # The test user token to test Nyx GitHub features
    #      ORG_GRADLE_PROJECT_gitLabTestUserToken: ${{ secrets.TEST_GITLAB_USER_TOKEN }}   # The test user token to test Nyx GitLab features
    #  run: ./gradlew check --build-cache --stacktrace
    - name: Archive Nyx state file
      uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: .nyx-state-${{ github.job }}.json
        path: build/.nyx-state.json
    - name: Archive Test Outputs
      uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: check-reports
        path: |
          **/build/reports/
          **/build/test-results/

  build:
    needs: [assemble,check]
    runs-on: ubuntu-latest
    steps:
    - name: Git checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Set up Go 1.17
      uses: actions/setup-go@v2
      with:
        go-version: 1.17.6
    # Start from the -check cache and save the job output cache as -build
    - name: Set up the pipeline cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          build/
          **/build/
        key: ${{ runner.os }}-nyx-gradle-${{ github.run_id }}-${{ github.job }}
        restore-keys: |
          ${{ runner.os }}-nyx-gradle-${{ github.run_id }}-unit-test
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      # We have a Gradle build cache issue here. Although we import the cache from the previous jobs, the :modules:java:main:test task keeps resulting
      # not up to date. Probably the cause is on its dependency ':modules:java:version:jar', which is 'Not worth caching' (according to Gradle).
      # The outcome is that all these tests are run again and we can't find the way to tell Gradle not to.
      env:
          # See the top level https://github.com/mooltiverse/nyx/blob/master/CONTRIBUTING.md#contributing-code file for details about passing these values when testing locally
          ORG_GRADLE_PROJECT_gitHubTestUserToken: ${{ secrets.TEST_GITHUB_USER_TOKEN }}   # The test user token to test Nyx GitHub features
          ORG_GRADLE_PROJECT_gitLabTestUserToken: ${{ secrets.TEST_GITLAB_USER_TOKEN }}   # The test user token to test Nyx GitLab features
      run: ./gradlew build --build-cache --stacktrace
    - name: Archive Nyx state file
      uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: .nyx-state-${{ github.job }}.json
        path: build/.nyx-state.json
    - name: Archive Javadoc
      uses: actions/upload-artifact@v2
      with:
        name: javadoc
        path: '**/build/docs/javadoc/'

  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Set up Go 1.17
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.6
      # Start from the -build cache and save the job output cache as -publish
      - name: Set up the pipeline cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            build/
            **/build/
          key: ${{ runner.os }}-nyx-gradle-${{ github.run_id }}-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-nyx-gradle-${{ github.run_id }}-build
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Publish with Gradle
        env:
          # See the top level https://github.com/mooltiverse/nyx/blob/master/CONTRIBUTING.md#contributing-code file for details about passing these values when testing locally
          ORG_GRADLE_PROJECT_gitHubUser: ${{ secrets.GITHUB_USERNAME }}
          ORG_GRADLE_PROJECT_gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          ORG_GRADLE_PROJECT_dockerHubUser: ${{ secrets.DOCKER_HUB_USERNAME }}
          ORG_GRADLE_PROJECT_dockerHubToken: ${{ secrets.DOCKER_HUB_TOKEN }}
          ORG_GRADLE_PROJECT_ossrhUsername: ${{ secrets.MAVEN_USER }}
          ORG_GRADLE_PROJECT_ossrhPassword: ${{ secrets.MAVEN_PASSWORD }}
          ORG_GRADLE_PROJECT_signingKeyBase64: ${{ secrets.GPG_PRIVATE_KEY_BASE64 }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.GPC_PASSPHRASE }}
          ORG_GRADLE_PROJECT_gradlePublishKey: ${{ secrets.GRADLE_PLUGIN_PUBLISH_KEY }}
          ORG_GRADLE_PROJECT_gradlePublishSecret: ${{ secrets.GRADLE_PLUGIN_PUBLISH_SECRET }}
        # TODO: remove the --info flag here
        run: ./gradlew publish --build-cache --stacktrace --info
      - name: Archive Nyx state file
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: .nyx-state-${{ github.job }}.json
          path: build/.nyx-state.json

  release:
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Set up Go 1.17
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.6
      # Start from the -publish cache and save the job output cache as -release
      - name: Set up the pipeline cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            build/
            **/build/
          key: ${{ runner.os }}-nyx-gradle-${{ github.run_id }}-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-nyx-gradle-${{ github.run_id }}-publish
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Release with Gradle
        env:
          # The 'gitHubUser' and 'gitHubToken' variables are passed as credentials to publish packages to the GitHub Packages repository, see: https://docs.github.com/en/actions/publishing-packages/publishing-java-packages-with-gradle#publishing-packages-to-github-packages.
          # The GH_TOKEN is used by Nyx configured service 'github' (see the top level settings.gradle) to publish the release to GitHub Releases.
          # The 'GITHUB_TOKEN' is automatically generated and provided by GitHub Actions so it doesn't need to be manually created. We just use it and copy as Gradle properties or environment variables.
          # See:
          # - the Automatic Token Authentication: https://docs.github.com/en/actions/security-guides/automatic-token-authentication
          # - the 'secrets' Context:  https://docs.github.com/en/actions/learn-github-actions/contexts
          # - the Default Environment Variables: https://docs.github.com/en/actions/learn-github-actions/environment-variables#default-environment-variables
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ORG_GRADLE_PROJECT_gitHubUser: ${{ secrets.GITHUB_ACTOR }}
          ORG_GRADLE_PROJECT_gitHubToken: ${{ secrets.GITHUB_TOKEN }}
        run: ./gradlew release --build-cache --info --stacktrace
      - name: Archive Nyx state file
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: .nyx-state-${{ github.job }}.json
          path: build/.nyx-state.json
