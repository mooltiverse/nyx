# Publish Docusausus sites.

name: Docusaurus Publish

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      runs-on:
        description: |-
          Define the type of machine to run the job on.
          Default: ubuntu-latest
        type: string
        required: false
        default: 'ubuntu-latest'
      verbosity:
        description: |-
          Sets the verbosity level to adjust the output logs verbosity.
          Allowed values are: 'error', 'warning', 'quiet', 'info', 'debug'.
          Default: quiet
        type: string
        required: false
        default: 'quiet'
      gradle-arguments:
        description: |-
          The whitespace separated list of Gradle arguments to pass on the
          Gradle command line. See also 'gradle-secret-arguments' for passing
          sensitive values.
          For example you may use '--build-cache', '--stacktrace', '--parallel',
          '--no-parallel' etc.
          Verbosity levels are automatically inferred by the value of 'verbosity'.
          For more see: https://docs.gradle.org/current/userguide/command_line_interface.html.
          Default: --build-cache --stacktrace
        type: string
        required: false
        default: "--build-cache --stacktrace"
      gradle-tasks:
        description: |-
          The whitespace separated list of Gradle tasks to run.
          Default: src:docker:publish
        type: string
        required: false
        default: "docs:publish"
      install-jdk:
        description: |-
          Whether to install the JDK or not.
          For more see: https://github.com/actions/setup-java.
          Please note that the tools come preinstalled in many hosted GitHub
          runner images and re-installing would just slow down the setup process.
          Consider installing only when the runners don't have it preinstalled or
          when you need a specific version.
          To check out if it's already installed see:
          - https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners#preinstalled-software
          Default: true
        type: boolean
        required: false
        default: true
      install-jdk-distribution:
        description: |-
          The JDK distribution to setup if 'install-jdk' is 'true'.
          For available distributions see: https://github.com/actions/setup-java.
          Default: temurin
        type: string
        required: false
        default: 'temurin'
      install-jdk-version:
        description: |-
          The JDK version to setup if 'install-jdk' is 'true'.
          For available versions see: https://github.com/actions/setup-java.
          Default: 21
        type: string
        required: false
        default: '21'
      install-gradle:
        description: |-
          Whether to install Gradle or not.
          For more see: https://github.com/gradle/actions/blob/main/docs/setup-gradle.md.
          Please note that the tools come preinstalled in many hosted GitHub
          runner images and re-installing would just slow down the setup process.
          Consider installing only when the runners don't have it preinstalled or
          when you need a specific version.
          To check out if it's already installed see:
          - https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners#preinstalled-software
          Default: false
        type: boolean
        required: false
        default: false
      install-gradle-version:
        description: |-
          The Gradle version to setup if 'install-gradle' is 'true'.
          There are a few aliases that can be used here: 'wrapper' uses the version
          defined in the Gradle wrapper (recommended), 'current' uses the latest
          stable release.
          For available versions see: https://github.com/gradle/actions/blob/main/docs/setup-gradle.md.
          Default: wrapper
        type: string
        required: false
        default: 'wrapper'
      install-node:
        description: |-
          Whether to install Node or not.
          For more see: https://github.com/actions/setup-node.
          Please note that the tools come preinstalled in many hosted GitHub
          runner images and re-installing would just slow down the setup process.
          Consider installing only when the runners don't have it preinstalled or
          when you need a specific version.
          To check out if it's already installed see:
          - https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners#preinstalled-software
          Default: false
        type: boolean
        required: false
        default: false
      install-node-version:
        description: |-
          The Node SDK version to setup if 'install-node' is 'true'.
          For available versions see: https://github.com/actions/setup-node.
          Default: latest
        type: string
        required: false
        default: 'latest'
      nyx-cache-name-restore-suffix:
        description: |-
          The suffix of the name to use for the cache that will be read by this
          workflow. This is useful to 'chain' caches, so here you can pass the
          suffix from a previous cache to make this workflow start from that
          one cache.
          If the cache to read does not exists a new one will be created from
          scratch without errors.
          Default: none
        type: string
        required: false
        default: ""
      gradle-cache-name-prefix:
        description: |-
          The prefix to use for the cache that will be read by this workflow.
          This is useful to 'chain' caches, so here you can pass the suffix
          from a previous cache to make this workflow start from that one cache.
          Moreover, this can be used to override the default Gradle action's
          cache prefix to make all jobs within the same stream (i.e. a feature)
          share the same prefix and not overlap with other streams. However,
          when setting this prefix to some specific feature you won't be
          able to merge the caches and in case you 'chain' them you can only
          use one upstream cache for each downstream job.
          If the cache to read does not exists a new one will be created from
          scratch without errors.
          Default: gradle-\$\{\{ github.job \}\}-docusaurus (isolate the cache for
          the 'docusaurus' feature).
        type: string
        required: false
        default: "gradle-${{ github.run_id }}-docusaurus"
      gradle-cache-name-restore-suffix:
        description: |-
          The suffix of the name to use for the cache that will be read by this
          workflow. This is useful to 'chain' caches, so here you can pass the
          suffix from a previous cache to make this workflow start from that
          one cache.
          If the cache to read does not exists a new one will be created from
          scratch without errors.
          Default: \$\{\{ github.job \}\}
        type: string
        required: false
        default: "${{ github.job }}"
      docusaurus-cache-name-restore-suffix:
        description: |-
          The suffix of the name to use for the cache that will be read by this
          workflow. This is useful to 'chain' caches, so here you can pass the
          suffix from a previous cache to make this workflow start from that
          one cache.
          If the cache to read does not exists a new one will be created from
          scratch without errors.
          Default: \$\{\{ github.job \}\}
        type: string
        required: false
        default: "${{ github.job }}"
      path:
        description: |-
          The path, relative to the local repository, where the site artifacts
          to publish are.
          Note this must be the path of the built site, not the site source.
          Default: docs
        type: string
        required: false
        default: "docs"
      enable-github-pages:
        description: |-
          Whether to deploy the site to GitHub pages or not.
          GitHub pages must be enabled for the repository or the whole
          organization in advance, through GitHub settings.
          Sites are supposed to be published to GitHub pages only from the
          'main' branch (default for this workflow), but you can override
          this using this input value.
          Default: \$\{\{ github.ref == 'refs/heads/main' \}\} (true when the current branch is 'main')
        type: boolean
        required: false
        default: ${{ github.ref == 'refs/heads/main' }}
    secrets:
      gradle-secret-arguments:
        description: |-
          The whitespace separated list of Gradle arguments to pass on the
          Gradle command line. This is for passing sensitive values.
          See also 'gradle-arguments' for passing non sensitive values.
          For example you may use '--quiet', '--warn', '--info', '--debug' to
          set the verbosity level.
          For more see: https://docs.gradle.org/current/userguide/command_line_interface.html.
        required: false
    outputs:
      gradle-cache-name-suffix:
        description: "The suffix of the name used by the last cache in this workflow. This is useful to 'chain' caches, so you can pass this value as input for other actions or workflows."
        value: ${{ jobs.publish.outputs.gradle-cache-name-suffix }}
      docusaurus-cache-name-suffix:
        description: "The suffix of the name used by the last cache in this workflow. This is useful to 'chain' caches, so you can pass this value as input for other actions or workflows."
        value: ${{ jobs.publish.outputs.docusaurus-cache-name-suffix }}

env:
  # Compute the extra Gradle properties to use for Gradle commands.
  # Here:
  # - we add one argument for the verbosity level passed in the 'verbosity' input
  GRADLE_EXTRA_OPTS: >-
    ${{ inputs.verbosity == 'warning' && '--warn' || '' }}
    ${{ inputs.verbosity == 'quiet' && '--quiet' || '' }}
    ${{ inputs.verbosity == 'info' && '--info' || '' }}
    ${{ inputs.verbosity == 'debug' && '--debug' || '' }}

jobs:
  publish:
    name: Publish
    runs-on: ${{ inputs.runs-on }}
    permissions:
      # Grant GITHUB_TOKEN the permissions required to make a Pages deployment.
      # Here we need to grant the extra permissions 'pages' and 'id-token' in addition to the
      # standard ones.
      contents: read    # to fetch the Git repository contents
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source
    #environment:
    #  name: github-pages
    #  url: ${{ steps.github-pages-deploy.outputs.page_url }}
    steps:
    # TODO: WAIT FOR MERGE: replace the following tag '@retrofitting'
    # with '@main' as soon as the branch has been merged to main.
    - uses: mooltiverse/nyx/.github/actions/setup-git@retrofitting
      with:
        verbosity: ${{ inputs.verbosity }}
    - id: nyx
      # TODO: WAIT FOR MERGE: replace the following tag '@retrofitting'
      # with '@main' as soon as the branch has been merged to main.
      uses: mooltiverse/nyx/.github/actions/setup-nyx@retrofitting
      with:
        # Just restore the cache
        enable-action: false
        verbosity: ${{ inputs.verbosity }}
        cache-name-restore-suffix: ${{ inputs.nyx-cache-name-restore-suffix }}
    - id: docusaurus
      # TODO: WAIT FOR MERGE: replace the following tag '@retrofitting'
      # with '@main' as soon as the branch has been merged to main.
      uses: mooltiverse/nyx/.github/actions/setup-docusaurus@retrofitting
      with:
        verbosity: ${{ inputs.verbosity }}
        install-node: ${{ inputs.install-node }}
        install-node-version: ${{ inputs.install-node-version }}
        # Restore the cache from the previous job to 'chain' the two caches
        cache-name-restore-suffix: ${{ inputs.docusaurus-cache-name-restore-suffix }}
    - id: gradle
      # TODO: WAIT FOR MERGE: replace the following tag '@retrofitting'
      # with '@main' as soon as the branch has been merged to main.
      uses: mooltiverse/nyx/.github/actions/setup-gradle@retrofitting
      with:
        verbosity: ${{ inputs.verbosity }}
        install-jdk: ${{ inputs.install-jdk }}
        install-jdk-version: ${{ inputs.install-jdk-version }}
        install-jdk-distribution: ${{ inputs.install-jdk-distribution }}
        install-gradle: ${{ inputs.install-gradle }}
        install-gradle-version: ${{ inputs.install-gradle-version }}
        cache-name-prefix: ${{ inputs.gradle-cache-name-prefix }}
        # Restore the cache from the previous job to 'chain' the two caches
        cache-name-restore-suffix: ${{ inputs.gradle-cache-name-restore-suffix }}
    - name: Publish the Docusaurus sites using Gradle scripts
      shell: bash
      run: ./gradlew ${{ inputs.gradle-arguments }} ${{ secrets.gradle-secret-arguments }} ${{ env.GRADLE_EXTRA_OPTS }} ${{ inputs.gradle-tasks }}
    - id: github-pages-upload
      name: Upload the Docusaurus site to GitHub Pages
      if: ${{ inputs.enable-github-pages }}
      uses: actions/upload-pages-artifact@v3
      with:
        path: ${{ inputs.path }}
    - id: github-pages-deploy
      name: Deploy the Docusaurus site to GitHub Pages
      if: ${{ inputs.enable-github-pages }}
      uses: actions/deploy-pages@v4
    outputs:
      docusaurus-cache-name-suffix: ${{ steps.docusaurus.outputs.cache-name-suffix }}
      gradle-cache-name-suffix: ${{ steps.gradle.outputs.cache-name-suffix }}
