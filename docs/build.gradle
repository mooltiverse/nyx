/*------------------------------------------------------------------------------
  Plugins DSL block
  https://docs.gradle.org/current/userguide/plugins.html#sec:plugins_block
------------------------------------------------------------------------------*/
plugins {
}

/*------------------------------------------------------------------------------
  Local sub-project properties
------------------------------------------------------------------------------*/
description = 'Documentation microsites'

/*------------------------------------------------------------------------------
  This is the configuration for all sub-projects, but not this project
------------------------------------------------------------------------------*/
subprojects {
  /*----------------------------------------------------------------------------
    Configurations and Dependencies
  ----------------------------------------------------------------------------*/
  // For more on Configurations, Dependencies and Artifacts see:
  // - https://docs.gradle.org/current/userguide/declaring_dependencies_adv.html
  // - https://docs.gradle.org/current/userguide/cross_project_publications.html
  configurations {
    // Here we define the configurations to:
    // - define dependencies to other projects so this project can use their
    //   artifacts
    // - expose artifacts produced by this project that can be used by others as
    //  dependencies
    // Configurations can extend othe configurations from within the same
    // project by means of 'extendsFrom'.
    // To add artifacts to configurations use the 'artifacts' section.
    apiDocumentation {
      // The 'apiDocumentation' configuration depends on the API documentation
      // generated by other projects to aggregate all API documentations into
      // one local configuration used to import them to the site.
      canBeConsumed = false
      canBeResolved = true
    }
  }

  dependencies {
    // Scan all the subprojects and, in case they have a configuration named
    // 'apiDocumentation', add it as a dependency to this project's
    // 'apiDocumentation' configuration, which then can be used as an
    // aggregation of all the API documentations.
    if (project.hasProperty("importApiDocumentation") && Boolean.parseBoolean(project.getProperty("importApiDocumentation"))) {
      rootProject.subprojects.findAll { p ->
        // skip this project to avoid self-dependencies
        p.path != project.path
      }.each { p ->
        p.afterEvaluate {
          if (p.configurations.getNames().contains('apiDocumentation')) {
            logger.debug("Adding the 'apiDocumentation' configuration from the ${p.path} project to the 'apiDocumentation' dependency in the ${project.path} project")
            apiDocumentation (project(path: p.path, configuration: 'apiDocumentation'))
          }
        }
      }
    }
  }

  /*----------------------------------------------------------------------------
    Additional tasks
  ----------------------------------------------------------------------------*/
  task importAPIDocumentation(group: 'build setup', description: 'Imports the API documentation generated by other projects into the local site') {
    // Only perform publishing if the flag is enabled from the properties
    onlyIf { project.hasProperty("importApiDocumentation") && Boolean.parseBoolean(project.getProperty("importApiDocumentation")) }

    dependsOn configurations.apiDocumentation
    if (project.hasProperty("importApiDocumentation") && Boolean.parseBoolean(project.getProperty("importApiDocumentation"))) {
      // Make sure the 'apiDocumentation' tasks from all projects run before
      // this one so that their outputs can be imported if needed.
      tasks.assemble.dependsOn rootProject.getTasksByName('apiDocumentation', true)
    }

    // Declare inputs and outputs of this task
    inputs.files(configurations.apiDocumentation.getIncoming().getFiles())
    outputs.dir("${projectDir}/docs")
    outputs.dir("${projectDir}/pages")

    doLast {
      // Since the 'copy' task doesn't support using a 'tarTree' as input along
      // with 'copySpec' to contro filtering and mapping contents, we first
      // need to extract all incoming archives to a temporary directory and
      // then copy them to this directory, this time with support for
      // copySpec.
      logger.quiet("Importing the API documentation")

      // Create a temporary directory where to extract all archives
      def tempDir = File.createTempDir()
      tempDir.deleteOnExit()

      configurations.apiDocumentation.getIncoming().getFiles().each { f -> 
      logger.debug("Extracting the API documentation from ${f.name} to ${tempDir.absolutePath}")
        copy {
          from tarTree(f)
          into(tempDir)
        }
      }

      if (project.hasProperty("apiDocumentationCopySpec")) {
        def json = new groovy.json.JsonSlurper().parseText(project.getProperty("apiDocumentationCopySpec"))
        try {
          if (json.containsKey('rules') && json.rules.size() > 0) {
            // Copy the union of all API documentations from the temporary directory
            // to the local directory.
            logger.debug("Copying the API documentation ${tempDir.absolutePath} to the site directory")

            // If we don't add any nested copySpec rule the 'copy' task just copies
            // everything, and that's what we don't want, otherwise, when there are
            // rules, they just copy twice.
            copy {
              into(projectDir)
              json.rules.each { rule ->
                logger.debug("Setting rule: ${rule}")
                if (rule.containsKey('from') && rule.containsKey('into')) {
                  from(new File(tempDir, rule.from)) {
                    into(rule.into)
                    if (rule.containsKey('include')) {
                      rule.include.each { includeOption -> 
                        include(includeOption)
                      }
                    }
                    if (rule.containsKey('exclude')) {
                      rule.exclude.each { excludeOption -> 
                        exclude(excludeOption)
                      }
                    }
                    if (rule.containsKey('rename')) {
                      rule.rename.each { renameOption -> 
                        rename(renameOption.from, renameOption.to)
                      }
                    }
                  }
                } else {
                  throw new GradleException("Rule ${rule} is malformed. The 'from' and 'into' attributes are required")
                }
              }
            }
          } else {
            logger.warn("The 'apiDocumentationCopySpec' does not define any rules. The API documentation can't be imported.")
          }
        } catch (Exception e) {
          logger.error(e.message)
          throw new GradleException("The 'apiDocumentationCopySpec' JSON property is missing or malformed.", e)
        }
      } else {
        throw new GradleException("The 'importApiDocumentation' flag is true but the property 'apiDocumentationCopySpec' was not found. The API documentation can't be imported.")
      }
    }
  }

  task docusaurusInstall(group: 'build setup', description: 'Installs Docusaurus') {
    // Declare inputs and outputs of this task
    // Run this task if there's any change in Docusaurus' configuration
    inputs.files('docusaurus.config.ts')
    // Output of this task is the '.docusaurus' and 'node_modules' subdirectory
    outputs.dir('.docusaurus')
    outputs.dir('node_modules')

    doLast {
      logger.quiet("Installing Docusaurus")
      exec {
        commandLine 'npm', 'install'
      }
    }
  }

  task docusaurusBuild(group: 'build', description: 'Renders the documentation site with Docusaurus') {
    dependsOn rootProject.tasks.nyxMake
    dependsOn docusaurusInstall
    dependsOn importAPIDocumentation

    // Declare inputs and outputs of this task
    // Run this task if there's any newer file among project sources
    // excluding Docusaurus' install files and the rendered outputs.
    inputs.files(fileTree(dir: projectDir, excludes: [buildDir.name, '.docusaurus', 'node_modules']))
    inputs.files(importAPIDocumentation.outputs.files)
    // Output of this task is the 'build' subdirectory
    outputs.dir(buildDir)

    doLast {
      logger.quiet("Building the Docusaurus site")
      exec {
        commandLine 'npm', 'run', 'build'
      }
    }
  }

  // This is just a lifecycle task
  task publish(group: 'publishing', description: 'Publishes Docs artifacts produced by this project to remote destinations') {
    // Publication is performed outside of these build scripts and it's done by
    // the target platform pulling contents from the Git repository.
  }

  task docusaurusClean(group: 'build', description: 'Deletes the local documentation site') {
  }

  task deepClean(group: 'build', description: 'Clean the reproducible and reusable artifacts including caches, dependencies etc') {
    dependsOn clean

    doLast {
      logger.quiet("Deleting the Docusaurus cache")
      delete '.docusaurus'
      delete 'node_modules'
    }
  }

  /*----------------------------------------------------------------------------
    Additional task dependencies
    ----------------------------------------------------------------------------*/
  tasks.assemble.dependsOn docusaurusBuild
  tasks.clean.dependsOn docusaurusClean

  /*----------------------------------------------------------------------------
    Artifacts published by this project
  ----------------------------------------------------------------------------*/
  // For more on Configurations, Dependencies and Artifacts see:
  // - https://docs.gradle.org/current/userguide/declaring_dependencies_adv.html
  // - https://docs.gradle.org/current/userguide/cross_project_publications.html
  artifacts {
    // Here we associate artifacts produced by this project to the
    // configurations so that they can be consumed by other projects.
  }
}

/*------------------------------------------------------------------------------
  Additional tasks
  ------------------------------------------------------------------------------*/
// This is just a lifecycle task
task publish(group: 'publishing', description: 'Publishes artifacts produced by this project') {
  dependsOn subprojects*.publish
}

task deepClean(group: 'build', description: 'Clean the reproducible and reusable artifacts including caches, dependencies etc') {
  dependsOn subprojects*.clean
}

/*------------------------------------------------------------------------------
  Additional task dependencies
  ------------------------------------------------------------------------------*/
tasks.assemble.dependsOn subprojects*.assemble
tasks.build.dependsOn subprojects*.build
tasks.clean.dependsOn subprojects*.clean
