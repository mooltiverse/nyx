# These are project properties used for the Docker images.
# Some of these properties are also Gradle standard project properties
# that are overridden for the specific Docker image.
#
# See:
# - https://docs.gradle.org/current/userguide/writing_build_scripts.html#sec:standard_project_properties

# The Docker image(s) name (also used as ID).
name=nyx

# The Docker image(s) display name.
# This value is also used for the 'org.opencontainers.image.title'
# standard OCI annotation.
displayName=Nyx

# The Docker image(s) description.
# This value is also used for the 'org.opencontainers.image.description'
# standard OCI annotation.
description=The one stop semantic release tool

# The URL to the documentation for the image(s).
# This value is also used for the 'org.opencontainers.image.url'
# and 'org.opencontainers.image.documentation' standard OCI annotations.
documentationUrl=https://mooltiverse.github.io/nyx/

# The URL to the source for the image(s).
# This should be the URL to the GitHub repository.
# This value is also used for the 'org.opencontainers.image.source'
# standard OCI annotation.
# When publishing images to GitHub Container Registry this value is
# what binds the Docker image to the repository. If this is wrong
# or missing GitHub will only show the image under the Organization
# page but not under the Repository Packages.
sourceUrl=https://github.com/mooltiverse/nyx

# License(s) under which the Docker image(s) is distributed as an
# SPDX License Expression.
# This value is also used for the 'org.opencontainers.image.licenses'
# standard OCI annotation.
# See:
# - https://spdx.github.io/spdx-spec/v2.3/SPDX-license-expressions/
licenses=Apache-2.0

# The target platforms for the Docker image(s).
# This is a comma-separated list of platforms.
# Chances are you only need 'linux/amd64' for Intel-based architectures or you
# may also add 'linux/arm64' for ARM-based ones.
# 
# For more see:
# - https://docs.docker.com/build/building/multi-platform/
# - https://docs.docker.com/build/guide/multi-platform/
platforms=linux/amd64

# The additional build contexts used when building the Docker image(s).
# These are the set of files that the builder can access during the build.
# Build instructions such as 'COPY' and 'ADD' can refer to any of the
# files and directories in the context.
# This is a comma-separated list of name=value pairs and each one will be
# passed as the value of an additional '--build-context' flag on the
# 'docker buildx build' command line, where names are context
# names, and values may be:
# - local directories, relative to this one
# - URLs, for example to a git repository or an HTTP URL
# - docker images, pulled from remote registries
# - OCI layout directories
# Example:
#   project=path/to/project/source,git=https://github.com/myuser/project.git,alpine=docker-image://alpine@sha256:0123456789
# Always try to narrow the context to avoid accidental inclusion of files
# in your target image and to make maintenance easier.
# You can import artifacts produced by other projects by also setting the
# 'importBinariesFrom' property. For example, setting:
#   contexts=dependencies=build/dependencies
#   importBinariesFrom=:src:go:app,:src:go:lib
# will extract all the binaries produced by the ':src:go:app' and
# ':src:go:lib' projects under 'build/dependencies/binaries' and the
# 'dependencies' context will allow to use statements like:
#   COPY --from=dependencies binaries/go/app/executable /bin
# in the Docker file(s).
# You can leave this option empty if your Dockerfile is not using
# contexts.
# If you want to add the whole repository as an additional context you can
# set this value as:
#   contexts=project=../../../
# Remember that:
# - if the directory contains a '.dockerignore' file, files that are ignored
#   are excluded from the context
# - the directory where the Dockerfile is automatically available as the
#   implicit context that you can use in 'ADD' and 'COPY' statements without
#   specifying the '--from' option
# Form more see:
# - https://docs.docker.com/build/concepts/context/
# - https://docs.docker.com/reference/cli/docker/buildx/build/#build-context
contexts=dependencies=build/dependencies

# The comma separated list of other Gradle subprojects to import the binary
# dependencies from.
# Each entry must be a Gradle subproject in Gradle's format, using ':' as
# path separators. Example:
#   :src:go:app,:src:rust:app
# The projects listed here must have a configuration named 'binaries',
# exporting zero or more tar archives containing the binary files that the
# 'producer' project exports. If any of these project doesn't have a
# 'binaries' configuration an error is raised by the Gradle script.
# When binaries are imported they are extracted in the
# 'build/dependencies/binaries' directory, which can also be added in the
# 'context' property in case you need to add any of these binaries to
# the Docker image(s).
# Leave this property empty or undefined if you don't need to import binaries
# from other projects.
importBinariesFrom=:src:go:nyx

# The Docker tags for the image(s).
# This is a comma-separated list of tags and allows for placeholders so that
# they are replaced by actual values by the script.
# Available placeholders are:
# - $name: will be replaced with the image name
# - $version: will be replaced with the current version
# - $flavor: will be replaced with the image flavor (if any)
#
# For example, setting this property to
#   gizmo,gizmo-$version,gizmo-$flavor-$version
# and assuming the current version is 1.2.3 and Dockerfiles come in two flavors
# ('blue' and 'green') will yeld to the following tags applied to the resulting
# images:
#   gizmo,gizmo-1.2.3,gizmo-blue-1.2.3
# for the 'blue' flavor image, and
#   gizmo,gizmo-1.2.3,gizmo-green-1.2.3
# for the 'green' flavor image.
#
# Please note that when using flavored Dockerfiles, all tags should use the
# '$flavor' placeholder to avoid overwriting of the same tag in the target
# repository. This is because repositories only allow one image per tag, so
# if you have the same tag applied to multiple images (which are different
# by their flavor), you can't predict which one gets the 'unflavored' tag.
# The same applies if multiple images are published onto the same repository.
# In this case different images (in different folders under 'src/docker/')
# may use separate repositories.
tags=$version

# The Docker tags for the published image(s) only when the current version is
# also the latest version and is a version number made of core numbers only
# (so not a pre-release).
# These tags behave exactly like the 'tags' property, including placeholders,
# but are limited to the latest version.
# Here you may apply the 'latest' tag and some of its variants as a moving tag.
#
# Please note that when using flavored Dockerfiles, all tags should use the
# '$flavor' placeholder to avoid overwriting of the same tag in the target
# repository. This is because repositories only allow one image per tag, so
# if you have the same tag applied to multiple images (which are different
# by their flavor), you can't predict which one gets the 'unflavored' tag.
latestTags=latest

# The Docker tags for the local image(s) only. These tags are never published
# to remote repositories but are used to tag local images only.
# This is useful when you need to select the images for local processes and
# tests.
# These tags behave exactly like the 'tags' property, including placeholders,
# but are limited to local images.
# Here you may apply the 'local' tag and some of its variants as a moving tag.
#
# Please note that when using flavored Dockerfiles, all tags should use the
# '$flavor' placeholder to avoid overlapping tags.
localTags=local

# The target to stop the build at when using multi-stage builds.
# This value will be used to set the '--target' argument value.
# Leave this undefined if you're not using multi-stage builds or you just
# want the build process to complete all targets.
target=

# The remote repositories where to publish (push) the Docker image(s).
# This is a comma-separated list of URLs and allows for placeholders so that
# they are replaced by actual values by the script.
# Available placeholders are:
# - $name: will be replaced with the image name
# - $version: will be replaced with the current version
# - $flavor: will be replaced with the image flavor (if any)
#
# Please note that:
# - repositories must be created in advance, before publishing, so you may
#   also need to authenticate against them both locally and using the CI/CD
#   pipelines
# - these scripts only do the push operation, assuming that authentication
#   has already been performed outside of these scripts in advance.
#   Autnetication is specific for each provider/repository
# - the URL format for repositories depends on the provider so, for example,
#   some may require the image name in the URL, others may not
#
# Examples:
# - ECR Repository: 1234567890.dkr.ecr.eu-west-1.amazonaws.com/mooltiverse/$name
# - GitHub Container Registry: ghcr.io/mooltiverse/$name
# - DockerHub Registry: mooltiverse/$name
registries=mooltiverse/nyx,ghcr.io/mooltiverse/nyx

# This is an advanced option to let you control the '--cache-from' option
# for Docker BuildKit cache. When this option is not defined or empty
# BuildKit will not be configured to use any cache.
# This option allows to cache artifacts so that the build process can be
# faster. This may be useful when running the 'build' and 'push' commands
# in separate steps, so that one can take advantage of the cache pupulated
# by the other.
# In CI/CD environments you need to use a remote cache (i.e. using one
# among the 'registry', 'gha', 's3') so that when tasks are executed on
# different nodes they can share the same cache, stored remotely.
# To this extent you may need to override this property at runtime on the
# command line. For example, when running GitHub Actions jobs you may want
# to use the 'gha' cache so you can run the Gradle scripts with the argument:
#   ./gradlew build -PbuildCacheTo='type=gha,mode=max' -PbuildCacheFrom='type=gha'
# or using an environment variable, like:
#   export ORG_GRADLE_PROJECT_buildCacheTo='type=gha,mode=max'
#   export ORG_GRADLE_PROJECT_buildCacheFrom='type=gha'
#   ./gradlew build
#
# Please note that, even if the 'gha' cache documentation does't mention
# this:
# - the image repository may get polluted by extra images storing the cache
# - it seems the cache is only stored for later retrieval when pushing images
#   and, since that is actually our last step in the build process, this
#   makes the cache almost useless because we need it between the 'build'
#   and the 'push' tasks and we don't need it anymore after the 'push'
#
# For more see:
# - the 'buildCacheTo' properties
# - https://docs.docker.com/reference/cli/docker/buildx/build/#cache-from
# - https://docs.docker.com/build/ci/github-actions/cache/
buildCacheFrom=type=local,src=build/cache

# This is an advanced option to let you control the '--cache-to' option
# for Docker BuildKit cache. When this option is not defined or empty
# BuildKit will not be configured to use any cache.
# This option allows to cache artifacts so that the build process can be
# faster. This may be useful when running the 'build' and 'push' commands
# in separate steps, so that one can take advantage of the cache pupulated
# by the other.
# In CI/CD environments you need to use a remote cache (i.e. using one
# among the 'registry', 'gha', 's3') so that when tasks are executed on
# different nodes they can share the same cache, stored remotely.
# To this extent you may need to override this property at runtime on the
# command line. For example, when running GitHub Actions jobs you may want
# to use the 'gha' cache so you can run the Gradle scripts with the argument:
#   ./gradlew build -PbuildCacheTo='type=gha,mode=max' -PbuildCacheFrom='type=gha'
# or using an environment variable, like:
#   export ORG_GRADLE_PROJECT_buildCacheTo='type=gha,mode=max'
#   export ORG_GRADLE_PROJECT_buildCacheFrom='type=gha'
#   ./gradlew build
#
# Please note that, even if the 'gha' cache documentation does't mention
# this:
# - the image repository may get polluted by extra images storing the cache
# - it seems the cache is only stored for later retrieval when pushing images
#   and, since that is actually our last step in the build process, this
#   makes the cache almost useless because we need it between the 'build'
#   and the 'push' tasks and we don't need it anymore after the 'push'
#
# For more see:
# - the 'buildCacheFrom' properties
# - https://docs.docker.com/reference/cli/docker/buildx/build/#cache-to
# - https://docs.docker.com/build/ci/github-actions/cache/
buildCacheTo=type=local,mode=max,dest=build/cache

# The comma separated list of extra arguments to pass to Docker when building
# the image locally.
# Each entry is a name=value pair, where the name is the name of the argument to
# set, while the value is... the value. If the value starts with a dollar sign
# ('$') then it's interpreted as an environment variable. In that case the
# script will read the environment variable and pass the value to Docker, already
# resolved.
# Values are passed to Docker using the '--build-arg' argument, one for each entry.
# These values take priority over all others defined in Docker files and,
# especially when using environment variables, are particularly useful to
# override values with runtime values.
# For more see:
# - https://docs.docker.com/reference/cli/docker/buildx/build/#build-arg
dockerBuildArgs=

# The semicolon (;) separated list of secrets to pass to Docker when building
# the image locally.
# ATTENTION: the separator is a semicolon (;), not a comma, because commas may
# be used in the secrets themselves.
# Each entry is a name=value pair, where the name is the name of the secret to
# set, while the value is... the value. The value may be composite by multiple
# pairs separated by commas (i.e. 'kube,env=KUBECONFIG').
# Values are passed to Docker using the '--secret' argument, one for each entry.
# For more see:
# - https://docs.docker.com/build/building/secrets/#secret-mounts
# EXAMPLE: set this property to 'id=github_token,env=GITHUB_TOKEN' to pass the
# GitHub token as a secret to the Docker build process using the command line
# option '--secret id=github_token,env=GITHUB_TOKEN'.
# In the Dockerfile you can use the secret using statements like:
#   RUN --mount=type=secret,id=github_token,env=GITHUB_TOKEN \
#       echo $GITHUB_TOKEN > /root/.github_token
# Rememer that the secret is available only for statements beginning with
# the --mount option.
dockerBuildSecrets=
