//go:build integration
// +build integration

// Only run these tests as part of the integration test suite, when the 'integration' build flag is passed (i.e. running go test --tags=integration)

/*
 * Copyright 2020 Mooltiverse
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package configuration_test

import (
	"testing" // https://pkg.go.dev/testing

	regexp2 "github.com/dlclark/regexp2"        // https://pkg.go.dev/github.com/dlclark/regexp2, we need to use this instead of the standard 'regexp' to have support for lookarounds (look ahead), even if this implementation is a little slower
	assert "github.com/stretchr/testify/assert" // https://pkg.go.dev/github.com/stretchr/testify/assert

	cnf "github.com/mooltiverse/nyx/src/go/nyx/configuration"
	stt "github.com/mooltiverse/nyx/src/go/nyx/state"
	tpl "github.com/mooltiverse/nyx/src/go/nyx/template"
	utl "github.com/mooltiverse/nyx/src/go/utils"
)

func TestReleaseTypesFeaturePositiveFilterTags(t *testing.T) {
	configuration, _ := cnf.NewConfiguration()
	configurationLayer := cnf.NewSimpleConfigurationLayer()
	configurationLayer.SetReleasePrefix(utl.PointerToString("v"))
	var cl cnf.ConfigurationLayer = configurationLayer
	configuration.WithRuntimeConfiguration(&cl)
	state, _ := stt.NewStateWith(configuration)
	flatState, _ := state.Flatten() // we need to flatten the state here to render the expression properly
	rendered, err := tpl.Render(*(*cnf.RELEASE_TYPES_FEATURE).GetFilterTags(), flatState)
	assert.NoError(t, err)
	re, err := regexp2.Compile(rendered, 0)
	assert.NoError(t, err)

	match, _ := re.MatchString("1.2.3-feat")
	assert.True(t, match)
	match, _ = re.MatchString("1.2.3-feat.1")
	assert.True(t, match)
	match, _ = re.MatchString("1.2.3-featABC")
	assert.True(t, match)
	match, _ = re.MatchString("1.2.3-featABC.1")
	assert.True(t, match)

	match, _ = re.MatchString("1.2.3-feature")
	assert.True(t, match)
	match, _ = re.MatchString("1.2.3-feature.1")
	assert.True(t, match)
	match, _ = re.MatchString("1.2.3-featureABC")
	assert.True(t, match)
	match, _ = re.MatchString("1.2.3-featureABC.1")
	assert.True(t, match)

	match, _ = re.MatchString("v1.2.3-feat")
	assert.True(t, match)
	match, _ = re.MatchString("v1.2.3-feat.1")
	assert.True(t, match)
	match, _ = re.MatchString("v1.2.3-featABC")
	assert.True(t, match)
	match, _ = re.MatchString("v1.2.3-featABC.1")
	assert.True(t, match)

	match, _ = re.MatchString("v1.2.3-feature")
	assert.True(t, match)
	match, _ = re.MatchString("v1.2.3-feature.1")
	assert.True(t, match)
	match, _ = re.MatchString("v1.2.3-featureABC")
	assert.True(t, match)
	match, _ = re.MatchString("v1.2.3-featureABC.1")
	assert.True(t, match)
}

func TestReleaseTypesFeatureNegativeFilterTags(t *testing.T) {
	configuration, _ := cnf.NewConfiguration()
	configurationLayer := cnf.NewSimpleConfigurationLayer()
	configurationLayer.SetReleasePrefix(utl.PointerToString("v"))
	var cl cnf.ConfigurationLayer = configurationLayer
	configuration.WithRuntimeConfiguration(&cl)
	state, _ := stt.NewStateWith(configuration)
	flatState, _ := state.Flatten() // we need to flatten the state here to render the expression properly
	rendered, err := tpl.Render(*(*cnf.RELEASE_TYPES_FEATURE).GetFilterTags(), flatState)
	assert.NoError(t, err)
	re, err := regexp2.Compile(rendered, 0)
	assert.NoError(t, err)

	match, _ := re.MatchString("1.2.3")
	assert.False(t, match)
	match, _ = re.MatchString("a.b.c")
	assert.False(t, match)

	match, _ = re.MatchString("1.2.3-fat")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-fat.1")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-fatABC")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-fatABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("1.2.3-fature")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-fature.1")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-fatureABC")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-fatureABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("1.2.3-feature-1")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-featureABC-1")
	assert.False(t, match)

	match, _ = re.MatchString("v1.2.3")
	assert.False(t, match)
	match, _ = re.MatchString("va.b.c")
	assert.False(t, match)

	match, _ = re.MatchString("v1.2.3-fat")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-fat.1")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-fatABC")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-fatABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("v1.2.3-feat-1")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-featABC-1")
	assert.False(t, match)

	match, _ = re.MatchString("z1.2.3-feat")
	assert.False(t, match)
	match, _ = re.MatchString("z1.2.3-feat.1")
	assert.False(t, match)
	match, _ = re.MatchString("z1.2.3-featABC")
	assert.False(t, match)
	match, _ = re.MatchString("z1.2.3-featABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("v1.2.3-fature")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-fature.1")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-fatureABC")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-fatureABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("z1.2.3-feature")
	assert.False(t, match)
	match, _ = re.MatchString("z1.2.3-feature.1")
	assert.False(t, match)
	match, _ = re.MatchString("z1.2.3-featureABC")
	assert.False(t, match)
	match, _ = re.MatchString("z1.2.3-featureABC.1")
	assert.False(t, match)
}

func TestReleaseTypesFeaturePositiveMatchBranches(t *testing.T) {
	configuration, _ := cnf.NewConfiguration()
	configurationLayer := cnf.NewSimpleConfigurationLayer()
	configurationLayer.SetReleasePrefix(utl.PointerToString("v"))
	var cl cnf.ConfigurationLayer = configurationLayer
	configuration.WithRuntimeConfiguration(&cl)
	state, _ := stt.NewStateWith(configuration)
	flatState, _ := state.Flatten() // we need to flatten the state here to render the expression properly
	rendered, err := tpl.Render(*(*cnf.RELEASE_TYPES_FEATURE).GetMatchBranches(), flatState)
	assert.NoError(t, err)
	re, err := regexp2.Compile(rendered, 0)
	assert.NoError(t, err)

	match, _ := re.MatchString("feat")
	assert.True(t, match)
	match, _ = re.MatchString("feat-123")
	assert.True(t, match)
	match, _ = re.MatchString("feat/abc")
	assert.True(t, match)

	match, _ = re.MatchString("feature")
	assert.True(t, match)
	match, _ = re.MatchString("feature-123")
	assert.True(t, match)
	match, _ = re.MatchString("feature/abc")
	assert.True(t, match)
}

func TestReleaseTypesFeatureNegativeMatchBranches(t *testing.T) {
	configuration, _ := cnf.NewConfiguration()
	configurationLayer := cnf.NewSimpleConfigurationLayer()
	configurationLayer.SetReleasePrefix(utl.PointerToString("v"))
	var cl cnf.ConfigurationLayer = configurationLayer
	configuration.WithRuntimeConfiguration(&cl)
	state, _ := stt.NewStateWith(configuration)
	flatState, _ := state.Flatten() // we need to flatten the state here to render the expression properly
	rendered, err := tpl.Render(*(*cnf.RELEASE_TYPES_FEATURE).GetMatchBranches(), flatState)
	assert.NoError(t, err)
	re, err := regexp2.Compile(rendered, 0)
	assert.NoError(t, err)

	match, _ := re.MatchString("")
	assert.False(t, match)
	match, _ = re.MatchString("f")
	assert.False(t, match)
	match, _ = re.MatchString("fea")
	assert.False(t, match)
	match, _ = re.MatchString("featu")
	assert.False(t, match)
	match, _ = re.MatchString("featuree")
	assert.False(t, match)
	match, _ = re.MatchString("feat-")
	assert.False(t, match)
	match, _ = re.MatchString("feature/")
	assert.False(t, match)

	match, _ = re.MatchString("something-")
	assert.False(t, match)
	match, _ = re.MatchString("something/")
	assert.False(t, match)
}

func TestReleaseTypesFixPositiveFilterTags(t *testing.T) {
	configuration, _ := cnf.NewConfiguration()
	configurationLayer := cnf.NewSimpleConfigurationLayer()
	configurationLayer.SetReleasePrefix(utl.PointerToString("v"))
	var cl cnf.ConfigurationLayer = configurationLayer
	configuration.WithRuntimeConfiguration(&cl)
	state, _ := stt.NewStateWith(configuration)
	flatState, _ := state.Flatten() // we need to flatten the state here to render the expression properly
	rendered, err := tpl.Render(*(*cnf.RELEASE_TYPES_FIX).GetFilterTags(), flatState)
	assert.NoError(t, err)
	re, err := regexp2.Compile(rendered, 0)
	assert.NoError(t, err)

	match, _ := re.MatchString("1.2.3-fix")
	assert.True(t, match)
	match, _ = re.MatchString("1.2.3-fix.1")
	assert.True(t, match)
	match, _ = re.MatchString("1.2.3-fixABC")
	assert.True(t, match)
	match, _ = re.MatchString("1.2.3-fixABC.1")
	assert.True(t, match)

	match, _ = re.MatchString("v1.2.3-fix")
	assert.True(t, match)
	match, _ = re.MatchString("v1.2.3-fix.1")
	assert.True(t, match)
	match, _ = re.MatchString("v1.2.3-fixABC")
	assert.True(t, match)
	match, _ = re.MatchString("v1.2.3-fixABC.1")
	assert.True(t, match)
}

func TestReleaseTypesFixNegativeFilterTags(t *testing.T) {
	configuration, _ := cnf.NewConfiguration()
	configurationLayer := cnf.NewSimpleConfigurationLayer()
	configurationLayer.SetReleasePrefix(utl.PointerToString("v"))
	var cl cnf.ConfigurationLayer = configurationLayer
	configuration.WithRuntimeConfiguration(&cl)
	state, _ := stt.NewStateWith(configuration)
	flatState, _ := state.Flatten() // we need to flatten the state here to render the expression properly
	rendered, err := tpl.Render(*(*cnf.RELEASE_TYPES_FIX).GetFilterTags(), flatState)
	assert.NoError(t, err)
	re, err := regexp2.Compile(rendered, 0)
	assert.NoError(t, err)

	match, _ := re.MatchString("1.2.3")
	assert.False(t, match)
	match, _ = re.MatchString("a.b.c")
	assert.False(t, match)

	match, _ = re.MatchString("1.2.3-fx")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-fx.1")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-fxABC")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-fxABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("1.2.3-htfix")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-htfix.1")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-htfixABC")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-htfixABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("1.2.3-hotfix")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-hotfix.1")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-hotfixABC")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-hotfixABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("1.2.3-hotfix-1")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-hotfixABC-1")
	assert.False(t, match)

	match, _ = re.MatchString("v1.2.3")
	assert.False(t, match)
	match, _ = re.MatchString("va.b.c")
	assert.False(t, match)

	match, _ = re.MatchString("v1.2.3-fx")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-fx.1")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-fxABC")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-fxABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("v1.2.3-fix-1")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-fixABC-1")
	assert.False(t, match)

	match, _ = re.MatchString("z1.2.3-fix")
	assert.False(t, match)
	match, _ = re.MatchString("z1.2.3-fix.1")
	assert.False(t, match)
	match, _ = re.MatchString("z1.2.3-fixABC")
	assert.False(t, match)
	match, _ = re.MatchString("z1.2.3-fixABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("v1.2.3-htfix")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-htfix.1")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-htfixABC")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-htfixABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("v1.2.3-hotfix")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-hotfix.1")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-hotfixABC")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-hotfixABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("z1.2.3-hotfix")
	assert.False(t, match)
	match, _ = re.MatchString("z1.2.3-hotfix.1")
	assert.False(t, match)
	match, _ = re.MatchString("z1.2.3-hotfixABC")
	assert.False(t, match)
	match, _ = re.MatchString("z1.2.3-hotfixABC.1")
	assert.False(t, match)
}

func TestReleaseTypesFixPositiveMatchBranches(t *testing.T) {
	configuration, _ := cnf.NewConfiguration()
	configurationLayer := cnf.NewSimpleConfigurationLayer()
	configurationLayer.SetReleasePrefix(utl.PointerToString("v"))
	var cl cnf.ConfigurationLayer = configurationLayer
	configuration.WithRuntimeConfiguration(&cl)
	state, _ := stt.NewStateWith(configuration)
	flatState, _ := state.Flatten() // we need to flatten the state here to render the expression properly
	rendered, err := tpl.Render(*(*cnf.RELEASE_TYPES_FIX).GetMatchBranches(), flatState)
	assert.NoError(t, err)
	re, err := regexp2.Compile(rendered, 0)
	assert.NoError(t, err)

	match, _ := re.MatchString("fix")
	assert.True(t, match)
	match, _ = re.MatchString("fix-123")
	assert.True(t, match)
	match, _ = re.MatchString("fix/abc")
	assert.True(t, match)
}

func TestReleaseTypesFixNegativeMatchBranches(t *testing.T) {
	configuration, _ := cnf.NewConfiguration()
	configurationLayer := cnf.NewSimpleConfigurationLayer()
	configurationLayer.SetReleasePrefix(utl.PointerToString("v"))
	var cl cnf.ConfigurationLayer = configurationLayer
	configuration.WithRuntimeConfiguration(&cl)
	state, _ := stt.NewStateWith(configuration)
	flatState, _ := state.Flatten() // we need to flatten the state here to render the expression properly
	rendered, err := tpl.Render(*(*cnf.RELEASE_TYPES_FIX).GetMatchBranches(), flatState)
	assert.NoError(t, err)
	re, err := regexp2.Compile(rendered, 0)
	assert.NoError(t, err)

	match, _ := re.MatchString("")
	assert.False(t, match)
	match, _ = re.MatchString("f")
	assert.False(t, match)
	match, _ = re.MatchString("fi")
	assert.False(t, match)
	match, _ = re.MatchString("fixx")
	assert.False(t, match)
	match, _ = re.MatchString("h")
	assert.False(t, match)
	match, _ = re.MatchString("hot")
	assert.False(t, match)
	match, _ = re.MatchString("hotfixx")
	assert.False(t, match)
	match, _ = re.MatchString("fix-")
	assert.False(t, match)
	match, _ = re.MatchString("fix/")
	assert.False(t, match)
	match, _ = re.MatchString("hotfix-")
	assert.False(t, match)
	match, _ = re.MatchString("hotfix/")
	assert.False(t, match)
	match, _ = re.MatchString("hotfix")
	assert.False(t, match)
	match, _ = re.MatchString("hotfix-123")
	assert.False(t, match)
	match, _ = re.MatchString("hotfix/abc")
	assert.False(t, match)

	match, _ = re.MatchString("something-")
	assert.False(t, match)
	match, _ = re.MatchString("something/")
	assert.False(t, match)
}

func TestReleaseTypesHotfixPositiveFilterTags(t *testing.T) {
	configuration, _ := cnf.NewConfiguration()
	configurationLayer := cnf.NewSimpleConfigurationLayer()
	configurationLayer.SetReleasePrefix(utl.PointerToString("v"))
	var cl cnf.ConfigurationLayer = configurationLayer
	configuration.WithRuntimeConfiguration(&cl)
	state, _ := stt.NewStateWith(configuration)
	flatState, _ := state.Flatten() // we need to flatten the state here to render the expression properly
	rendered, err := tpl.Render(*(*cnf.RELEASE_TYPES_HOTFIX).GetFilterTags(), flatState)
	assert.NoError(t, err)
	re, err := regexp2.Compile(rendered, 0)
	assert.NoError(t, err)

	match, _ := re.MatchString("1.2.3-hotfix")
	assert.True(t, match)
	match, _ = re.MatchString("1.2.3-hotfix.1")
	assert.True(t, match)
	match, _ = re.MatchString("1.2.3-hotfixABC")
	assert.True(t, match)
	match, _ = re.MatchString("1.2.3-hotfixABC.1")
	assert.True(t, match)

	match, _ = re.MatchString("v1.2.3-hotfix")
	assert.True(t, match)
	match, _ = re.MatchString("v1.2.3-hotfix.1")
	assert.True(t, match)
	match, _ = re.MatchString("v1.2.3-hotfixABC")
	assert.True(t, match)
	match, _ = re.MatchString("v1.2.3-hotfixABC.1")
	assert.True(t, match)
}

func TestReleaseTypesHotfixNegativeFilterTags(t *testing.T) {
	configuration, _ := cnf.NewConfiguration()
	configurationLayer := cnf.NewSimpleConfigurationLayer()
	configurationLayer.SetReleasePrefix(utl.PointerToString("v"))
	var cl cnf.ConfigurationLayer = configurationLayer
	configuration.WithRuntimeConfiguration(&cl)
	state, _ := stt.NewStateWith(configuration)
	flatState, _ := state.Flatten() // we need to flatten the state here to render the expression properly
	rendered, err := tpl.Render(*(*cnf.RELEASE_TYPES_HOTFIX).GetFilterTags(), flatState)
	assert.NoError(t, err)
	re, err := regexp2.Compile(rendered, 0)
	assert.NoError(t, err)

	match, _ := re.MatchString("1.2.3")
	assert.False(t, match)
	match, _ = re.MatchString("a.b.c")
	assert.False(t, match)

	match, _ = re.MatchString("1.2.3-fx")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-fx.1")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-fxABC")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-fxABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("1.2.3-htfix")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-htfix.1")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-htfixABC")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-htfixABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("1.2.3-fix")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-fix.1")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-fixABC")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-fixABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("1.2.3-hotfix-1")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-hotfixABC-1")
	assert.False(t, match)

	match, _ = re.MatchString("v1.2.3")
	assert.False(t, match)
	match, _ = re.MatchString("va.b.c")
	assert.False(t, match)

	match, _ = re.MatchString("v1.2.3-fx")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-fx.1")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-fxABC")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-fxABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("v1.2.3-fix-1")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-fixABC-1")
	assert.False(t, match)

	match, _ = re.MatchString("z1.2.3-fix")
	assert.False(t, match)
	match, _ = re.MatchString("z1.2.3-fix.1")
	assert.False(t, match)
	match, _ = re.MatchString("z1.2.3-fixABC")
	assert.False(t, match)
	match, _ = re.MatchString("z1.2.3-fixABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("v1.2.3-htfix")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-htfix.1")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-htfixABC")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-htfixABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("v1.2.3-fix")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-fix.1")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-fixABC")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-fixABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("z1.2.3-hotfix")
	assert.False(t, match)
	match, _ = re.MatchString("z1.2.3-hotfix.1")
	assert.False(t, match)
	match, _ = re.MatchString("z1.2.3-hotfixABC")
	assert.False(t, match)
	match, _ = re.MatchString("z1.2.3-hotfixABC.1")
	assert.False(t, match)
}

func TestReleaseTypesHotfixPositiveMatchBranches(t *testing.T) {
	configuration, _ := cnf.NewConfiguration()
	configurationLayer := cnf.NewSimpleConfigurationLayer()
	configurationLayer.SetReleasePrefix(utl.PointerToString("v"))
	var cl cnf.ConfigurationLayer = configurationLayer
	configuration.WithRuntimeConfiguration(&cl)
	state, _ := stt.NewStateWith(configuration)
	flatState, _ := state.Flatten() // we need to flatten the state here to render the expression properly
	rendered, err := tpl.Render(*(*cnf.RELEASE_TYPES_HOTFIX).GetMatchBranches(), flatState)
	assert.NoError(t, err)
	re, err := regexp2.Compile(rendered, 0)
	assert.NoError(t, err)

	match, _ := re.MatchString("hotfix")
	assert.True(t, match)
	match, _ = re.MatchString("hotfix-123")
	assert.True(t, match)
	match, _ = re.MatchString("hotfix/abc")
	assert.True(t, match)
}

func TestReleaseTypesHotfixNegativeMatchBranches(t *testing.T) {
	configuration, _ := cnf.NewConfiguration()
	configurationLayer := cnf.NewSimpleConfigurationLayer()
	configurationLayer.SetReleasePrefix(utl.PointerToString("v"))
	var cl cnf.ConfigurationLayer = configurationLayer
	configuration.WithRuntimeConfiguration(&cl)
	state, _ := stt.NewStateWith(configuration)
	flatState, _ := state.Flatten() // we need to flatten the state here to render the expression properly
	rendered, err := tpl.Render(*(*cnf.RELEASE_TYPES_HOTFIX).GetMatchBranches(), flatState)
	assert.NoError(t, err)
	re, err := regexp2.Compile(rendered, 0)
	assert.NoError(t, err)

	match, _ := re.MatchString("")
	assert.False(t, match)
	match, _ = re.MatchString("f")
	assert.False(t, match)
	match, _ = re.MatchString("fi")
	assert.False(t, match)
	match, _ = re.MatchString("fixx")
	assert.False(t, match)
	match, _ = re.MatchString("h")
	assert.False(t, match)
	match, _ = re.MatchString("hot")
	assert.False(t, match)
	match, _ = re.MatchString("hotfixx")
	assert.False(t, match)
	match, _ = re.MatchString("fix-")
	assert.False(t, match)
	match, _ = re.MatchString("fix/")
	assert.False(t, match)
	match, _ = re.MatchString("fix")
	assert.False(t, match)
	match, _ = re.MatchString("fix-123")
	assert.False(t, match)
	match, _ = re.MatchString("fix/abc")
	assert.False(t, match)
	match, _ = re.MatchString("hotfix-")
	assert.False(t, match)
	match, _ = re.MatchString("hotfix/")
	assert.False(t, match)

	match, _ = re.MatchString("something-")
	assert.False(t, match)
	match, _ = re.MatchString("something/")
	assert.False(t, match)
}

func TestReleaseTypesIntegrationPositiveFilterTags(t *testing.T) {
	configuration, _ := cnf.NewConfiguration()
	configurationLayer := cnf.NewSimpleConfigurationLayer()
	configurationLayer.SetReleasePrefix(utl.PointerToString("v"))
	var cl cnf.ConfigurationLayer = configurationLayer
	configuration.WithRuntimeConfiguration(&cl)
	state, _ := stt.NewStateWith(configuration)
	flatState, _ := state.Flatten() // we need to flatten the state here to render the expression properly
	rendered, err := tpl.Render(*(*cnf.RELEASE_TYPES_INTEGRATION).GetFilterTags(), flatState)
	assert.NoError(t, err)
	re, err := regexp2.Compile(rendered, 0)
	assert.NoError(t, err)

	match, _ := re.MatchString("1.2.3-develop")
	assert.True(t, match)
	match, _ = re.MatchString("1.2.3-develop.1")
	assert.True(t, match)

	match, _ = re.MatchString("1.2.3-development")
	assert.True(t, match)
	match, _ = re.MatchString("1.2.3-development.1")
	assert.True(t, match)

	match, _ = re.MatchString("1.2.3-integration")
	assert.True(t, match)
	match, _ = re.MatchString("1.2.3-integration.1")
	assert.True(t, match)

	match, _ = re.MatchString("1.2.3-latest")
	assert.True(t, match)
	match, _ = re.MatchString("1.2.3-latest.1")
	assert.True(t, match)

	match, _ = re.MatchString("v1.2.3-develop")
	assert.True(t, match)
	match, _ = re.MatchString("v1.2.3-develop.1")
	assert.True(t, match)

	match, _ = re.MatchString("v1.2.3-development")
	assert.True(t, match)
	match, _ = re.MatchString("v1.2.3-development.1")
	assert.True(t, match)

	match, _ = re.MatchString("v1.2.3-integration")
	assert.True(t, match)
	match, _ = re.MatchString("v1.2.3-integration.1")
	assert.True(t, match)

	match, _ = re.MatchString("v1.2.3-latest")
	assert.True(t, match)
	match, _ = re.MatchString("v1.2.3-latest.1")
	assert.True(t, match)
}

func TestReleaseTypesIntegrationNegativeFilterTags(t *testing.T) {
	configuration, _ := cnf.NewConfiguration()
	configurationLayer := cnf.NewSimpleConfigurationLayer()
	configurationLayer.SetReleasePrefix(utl.PointerToString("v"))
	var cl cnf.ConfigurationLayer = configurationLayer
	configuration.WithRuntimeConfiguration(&cl)
	state, _ := stt.NewStateWith(configuration)
	flatState, _ := state.Flatten() // we need to flatten the state here to render the expression properly
	rendered, err := tpl.Render(*(*cnf.RELEASE_TYPES_INTEGRATION).GetFilterTags(), flatState)
	assert.NoError(t, err)
	re, err := regexp2.Compile(rendered, 0)
	assert.NoError(t, err)

	match, _ := re.MatchString("1.2.3")
	assert.False(t, match)
	match, _ = re.MatchString("a.b.c")
	assert.False(t, match)

	match, _ = re.MatchString("1.2.3-developABC")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-developABC.1")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-developmentABC")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-developmentABC.1")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-integrationABC")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-integrationABC.1")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-latestABC")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-latestABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("1.2.3-dvelop")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-dvelop.1")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-dvelopABC")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-dvelopABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("1.2.3-dvelopment")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-dvelopment.1")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-dvelopmentABC")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-dvelopmentABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("1.2.3-development-1")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-developmentABC-1")
	assert.False(t, match)

	match, _ = re.MatchString("v1.2.3")
	assert.False(t, match)
	match, _ = re.MatchString("va.b.c")
	assert.False(t, match)

	match, _ = re.MatchString("v1.2.3-developABC")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-developABC.1")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-developmentABC")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-developmentABC.1")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-integrationABC")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-integrationABC.1")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-latestABC")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-latestABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("v1.2.3-dvelop")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-dvelop.1")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-dvelopABC")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-dvelopABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("v1.2.3-develop-1")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-developABC-1")
	assert.False(t, match)

	match, _ = re.MatchString("z1.2.3-develop")
	assert.False(t, match)
	match, _ = re.MatchString("z1.2.3-develop.1")
	assert.False(t, match)
	match, _ = re.MatchString("z1.2.3-developABC")
	assert.False(t, match)
	match, _ = re.MatchString("z1.2.3-developABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("v1.2.3-dvelopment")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-dvelopment.1")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-dvelopmentABC")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-dvelopmentABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("z1.2.3-development")
	assert.False(t, match)
	match, _ = re.MatchString("z1.2.3-development.1")
	assert.False(t, match)
	match, _ = re.MatchString("z1.2.3-developmentABC")
	assert.False(t, match)
	match, _ = re.MatchString("z1.2.3-developmentABC.1")
	assert.False(t, match)
}

func TestReleaseTypesIntegrationPositiveMatchBranches(t *testing.T) {
	configuration, _ := cnf.NewConfiguration()
	configurationLayer := cnf.NewSimpleConfigurationLayer()
	configurationLayer.SetReleasePrefix(utl.PointerToString("v"))
	var cl cnf.ConfigurationLayer = configurationLayer
	configuration.WithRuntimeConfiguration(&cl)
	state, _ := stt.NewStateWith(configuration)
	flatState, _ := state.Flatten() // we need to flatten the state here to render the expression properly
	rendered, err := tpl.Render(*(*cnf.RELEASE_TYPES_INTEGRATION).GetMatchBranches(), flatState)
	assert.NoError(t, err)
	re, err := regexp2.Compile(rendered, 0)
	assert.NoError(t, err)

	match, _ := re.MatchString("develop")
	assert.True(t, match)
	match, _ = re.MatchString("development")
	assert.True(t, match)
	match, _ = re.MatchString("integration")
	assert.True(t, match)
	match, _ = re.MatchString("latest")
	assert.True(t, match)
}

func TestReleaseTypesIntegrationNegativeMatchBranches(t *testing.T) {
	configuration, _ := cnf.NewConfiguration()
	configurationLayer := cnf.NewSimpleConfigurationLayer()
	configurationLayer.SetReleasePrefix(utl.PointerToString("v"))
	var cl cnf.ConfigurationLayer = configurationLayer
	configuration.WithRuntimeConfiguration(&cl)
	state, _ := stt.NewStateWith(configuration)
	flatState, _ := state.Flatten() // we need to flatten the state here to render the expression properly
	rendered, err := tpl.Render(*(*cnf.RELEASE_TYPES_INTEGRATION).GetMatchBranches(), flatState)
	assert.NoError(t, err)
	re, err := regexp2.Compile(rendered, 0)
	assert.NoError(t, err)

	match, _ := re.MatchString("")
	assert.False(t, match)
	match, _ = re.MatchString("d")
	assert.False(t, match)
	match, _ = re.MatchString("develo")
	assert.False(t, match)
	match, _ = re.MatchString("developm")
	assert.False(t, match)
	match, _ = re.MatchString("developmentt")
	assert.False(t, match)
	match, _ = re.MatchString("integrationn")
	assert.False(t, match)
	match, _ = re.MatchString("latestt")
	assert.False(t, match)

	match, _ = re.MatchString("DEVELOP")
	assert.False(t, match)
	match, _ = re.MatchString("DEVELOPMENT")
	assert.False(t, match)
	match, _ = re.MatchString("INTEGRATION")
	assert.False(t, match)
	match, _ = re.MatchString("LATEST")
	assert.False(t, match)
}

func TestReleaseTypesInternalPositiveFilterTags(t *testing.T) {
	// this release type has no branch pattern to test for matching
}

func TestReleaseTypesInternalNegativeFilterTags(t *testing.T) {
	// this release type has no branch pattern to test for matching
}

func TestReleaseTypesInternalPositiveMatchBranches(t *testing.T) {
	// this release type has no branch pattern to test for matching
}

func TestReleaseTypesInternalNegativeMatchBranches(t *testing.T) {
	// this release type has no branch pattern to test for matching
}

func TestReleaseTypesMainlinePositiveFilterTags(t *testing.T) {
	configuration, _ := cnf.NewConfiguration()
	configurationLayer := cnf.NewSimpleConfigurationLayer()
	configurationLayer.SetReleasePrefix(utl.PointerToString("v"))
	var cl cnf.ConfigurationLayer = configurationLayer
	configuration.WithRuntimeConfiguration(&cl)
	state, _ := stt.NewStateWith(configuration)
	flatState, _ := state.Flatten() // we need to flatten the state here to render the expression properly
	rendered, err := tpl.Render(*(*cnf.RELEASE_TYPES_MAINLINE).GetFilterTags(), flatState)
	assert.NoError(t, err)
	re, err := regexp2.Compile(rendered, 0)
	assert.NoError(t, err)

	match, _ := re.MatchString("1.2.3")
	assert.True(t, match)
}

func TestReleaseTypesMainlineNegativeFilterTags(t *testing.T) {
	configuration, _ := cnf.NewConfiguration()
	configurationLayer := cnf.NewSimpleConfigurationLayer()
	configurationLayer.SetReleasePrefix(utl.PointerToString("v"))
	var cl cnf.ConfigurationLayer = configurationLayer
	configuration.WithRuntimeConfiguration(&cl)
	state, _ := stt.NewStateWith(configuration)
	flatState, _ := state.Flatten() // we need to flatten the state here to render the expression properly
	rendered, err := tpl.Render(*(*cnf.RELEASE_TYPES_MAINLINE).GetFilterTags(), flatState)
	assert.NoError(t, err)
	re, err := regexp2.Compile(rendered, 0)
	assert.NoError(t, err)

	match, _ := re.MatchString("a.b.c")
	assert.False(t, match)

	match, _ = re.MatchString("1.2.3-a")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-a.1")
	assert.False(t, match)

	match, _ = re.MatchString("va.b.c")
	assert.False(t, match)

	match, _ = re.MatchString("v1.2.3-a")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-a.1")
	assert.False(t, match)
}

func TestReleaseTypesMainlinePositiveMatchBranches(t *testing.T) {
	configuration, _ := cnf.NewConfiguration()
	configurationLayer := cnf.NewSimpleConfigurationLayer()
	configurationLayer.SetReleasePrefix(utl.PointerToString("v"))
	var cl cnf.ConfigurationLayer = configurationLayer
	configuration.WithRuntimeConfiguration(&cl)
	state, _ := stt.NewStateWith(configuration)
	flatState, _ := state.Flatten() // we need to flatten the state here to render the expression properly
	rendered, err := tpl.Render(*(*cnf.RELEASE_TYPES_MAINLINE).GetMatchBranches(), flatState)
	assert.NoError(t, err)
	re, err := regexp2.Compile(rendered, 0)
	assert.NoError(t, err)

	match, _ := re.MatchString("main")
	assert.True(t, match)
	match, _ = re.MatchString("master")
	assert.True(t, match)
}

func TestReleaseTypesMainlineNegativeMatchBranches(t *testing.T) {
	configuration, _ := cnf.NewConfiguration()
	configurationLayer := cnf.NewSimpleConfigurationLayer()
	configurationLayer.SetReleasePrefix(utl.PointerToString("v"))
	var cl cnf.ConfigurationLayer = configurationLayer
	configuration.WithRuntimeConfiguration(&cl)
	state, _ := stt.NewStateWith(configuration)
	flatState, _ := state.Flatten() // we need to flatten the state here to render the expression properly
	rendered, err := tpl.Render(*(*cnf.RELEASE_TYPES_MAINLINE).GetMatchBranches(), flatState)
	assert.NoError(t, err)
	re, err := regexp2.Compile(rendered, 0)
	assert.NoError(t, err)

	match, _ := re.MatchString("")
	assert.False(t, match)
	match, _ = re.MatchString("m")
	assert.False(t, match)
	match, _ = re.MatchString("ma")
	assert.False(t, match)
	match, _ = re.MatchString("mai")
	assert.False(t, match)
	match, _ = re.MatchString("mainn")
	assert.False(t, match)
	match, _ = re.MatchString("mas")
	assert.False(t, match)
	match, _ = re.MatchString("mast")
	assert.False(t, match)
	match, _ = re.MatchString("maste")
	assert.False(t, match)
	match, _ = re.MatchString("masterr")
	assert.False(t, match)

	match, _ = re.MatchString("MAIN")
	assert.False(t, match)
	match, _ = re.MatchString("MASTER")
	assert.False(t, match)
}

func TestReleaseTypesMaintenancePositiveFilterTags(t *testing.T) {
	configuration, _ := cnf.NewConfiguration()
	configurationLayer := cnf.NewSimpleConfigurationLayer()
	configurationLayer.SetReleasePrefix(utl.PointerToString("v"))
	var cl cnf.ConfigurationLayer = configurationLayer
	configuration.WithRuntimeConfiguration(&cl)
	state, _ := stt.NewStateWith(configuration)
	flatState, _ := state.Flatten() // we need to flatten the state here to render the expression properly
	rendered, err := tpl.Render(*(*cnf.RELEASE_TYPES_MAINTENANCE).GetFilterTags(), flatState)
	assert.NoError(t, err)
	re, err := regexp2.Compile(rendered, 0)
	assert.NoError(t, err)

	match, _ := re.MatchString("1.2.3")
	assert.True(t, match)
}

func TestReleaseTypesMaintenanceNegativeFilterTags(t *testing.T) {
	configuration, _ := cnf.NewConfiguration()
	configurationLayer := cnf.NewSimpleConfigurationLayer()
	configurationLayer.SetReleasePrefix(utl.PointerToString("v"))
	var cl cnf.ConfigurationLayer = configurationLayer
	configuration.WithRuntimeConfiguration(&cl)
	state, _ := stt.NewStateWith(configuration)
	flatState, _ := state.Flatten() // we need to flatten the state here to render the expression properly
	rendered, err := tpl.Render(*(*cnf.RELEASE_TYPES_MAINTENANCE).GetFilterTags(), flatState)
	assert.NoError(t, err)
	re, err := regexp2.Compile(rendered, 0)
	assert.NoError(t, err)

	match, _ := re.MatchString("a.b.c")
	assert.False(t, match)

	match, _ = re.MatchString("1.2.3-a")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-a.1")
	assert.False(t, match)

	match, _ = re.MatchString("va.b.c")
	assert.False(t, match)

	match, _ = re.MatchString("v1.2.3-a")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-a.1")
	assert.False(t, match)
}

func TestReleaseTypesMaintenancePositiveMatchBranches(t *testing.T) {
	configuration, _ := cnf.NewConfiguration()
	configurationLayer := cnf.NewSimpleConfigurationLayer()
	configurationLayer.SetReleasePrefix(utl.PointerToString("v"))
	var cl cnf.ConfigurationLayer = configurationLayer
	configuration.WithRuntimeConfiguration(&cl)
	state, _ := stt.NewStateWith(configuration)
	flatState, _ := state.Flatten() // we need to flatten the state here to render the expression properly
	rendered, err := tpl.Render(*(*cnf.RELEASE_TYPES_MAINTENANCE).GetMatchBranches(), flatState)
	assert.NoError(t, err)
	re, err := regexp2.Compile(rendered, 0)
	assert.NoError(t, err)

	match, _ := re.MatchString("1")
	assert.True(t, match)
	match, _ = re.MatchString("1.x")
	assert.True(t, match)
	match, _ = re.MatchString("1.x.x")
	assert.True(t, match)
	match, _ = re.MatchString("12")
	assert.True(t, match)
	match, _ = re.MatchString("12.x")
	assert.True(t, match)
	match, _ = re.MatchString("12.x.x")
	assert.True(t, match)
	match, _ = re.MatchString("1.2")
	assert.True(t, match)
	match, _ = re.MatchString("1.2.x")
	assert.True(t, match)
	match, _ = re.MatchString("12")
	assert.True(t, match)
	match, _ = re.MatchString("12.22")
	assert.True(t, match)
	match, _ = re.MatchString("12.22.x")
	assert.True(t, match)
	match, _ = re.MatchString("1.2.3")
	assert.True(t, match)
	match, _ = re.MatchString("12.22.33")
	assert.True(t, match)
	match, _ = re.MatchString("v1")
	assert.True(t, match)
	match, _ = re.MatchString("v1.x")
	assert.True(t, match)
	match, _ = re.MatchString("v1.x.x")
	assert.True(t, match)
	match, _ = re.MatchString("v12")
	assert.True(t, match)
	match, _ = re.MatchString("v12.x")
	assert.True(t, match)
	match, _ = re.MatchString("v12.x.x")
	assert.True(t, match)
	match, _ = re.MatchString("v1.2")
	assert.True(t, match)
	match, _ = re.MatchString("v1.2.x")
	assert.True(t, match)
	match, _ = re.MatchString("v12")
	assert.True(t, match)
	match, _ = re.MatchString("v12.22")
	assert.True(t, match)
	match, _ = re.MatchString("v12.22.x")
	assert.True(t, match)
	match, _ = re.MatchString("v1.2.3")
	assert.True(t, match)
	match, _ = re.MatchString("v12.22.33")
	assert.True(t, match)
}

func TestReleaseTypesMaintenanceNegativeMatchBranches(t *testing.T) {
	configuration, _ := cnf.NewConfiguration()
	configurationLayer := cnf.NewSimpleConfigurationLayer()
	configurationLayer.SetReleasePrefix(utl.PointerToString("v"))
	var cl cnf.ConfigurationLayer = configurationLayer
	configuration.WithRuntimeConfiguration(&cl)
	state, _ := stt.NewStateWith(configuration)
	flatState, _ := state.Flatten() // we need to flatten the state here to render the expression properly
	rendered, err := tpl.Render(*(*cnf.RELEASE_TYPES_MAINTENANCE).GetMatchBranches(), flatState)
	assert.NoError(t, err)
	re, err := regexp2.Compile(rendered, 0)
	assert.NoError(t, err)

	match, _ := re.MatchString("")
	assert.False(t, match)
	match, _ = re.MatchString("v")
	assert.False(t, match)
	match, _ = re.MatchString("vv")
	assert.False(t, match)
	match, _ = re.MatchString("1.a")
	assert.False(t, match)
	match, _ = re.MatchString("1.a.b")
	assert.False(t, match)
	match, _ = re.MatchString("1,x")
	assert.False(t, match)
	match, _ = re.MatchString("1,x,x")
	assert.False(t, match)
	match, _ = re.MatchString("1.x.x.")
	assert.False(t, match)
	match, _ = re.MatchString("1.x.x.x")
	assert.False(t, match)
	match, _ = re.MatchString("v1.a")
	assert.False(t, match)
	match, _ = re.MatchString("v1.a.b")
	assert.False(t, match)
	match, _ = re.MatchString("v1,x")
	assert.False(t, match)
	match, _ = re.MatchString("v1,x,x")
	assert.False(t, match)
	match, _ = re.MatchString("v1.x.x.")
	assert.False(t, match)
	match, _ = re.MatchString("v1.x.x.x")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3.x")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3.x")
	assert.False(t, match)
}

func TestReleaseTypesMaturityPositiveFilterTags(t *testing.T) {
	configuration, _ := cnf.NewConfiguration()
	configurationLayer := cnf.NewSimpleConfigurationLayer()
	configurationLayer.SetReleasePrefix(utl.PointerToString("v"))
	var cl cnf.ConfigurationLayer = configurationLayer
	configuration.WithRuntimeConfiguration(&cl)
	state, _ := stt.NewStateWith(configuration)
	flatState, _ := state.Flatten() // we need to flatten the state here to render the expression properly
	rendered, err := tpl.Render(*(*cnf.RELEASE_TYPES_MATURITY).GetFilterTags(), flatState)
	assert.NoError(t, err)
	re, err := regexp2.Compile(rendered, 0)
	assert.NoError(t, err)

	match, _ := re.MatchString("1.2.3")
	assert.True(t, match)

	match, _ = re.MatchString("1.2.3-alpha")
	assert.True(t, match)
	match, _ = re.MatchString("1.2.3-alpha.1")
	assert.True(t, match)

	match, _ = re.MatchString("1.2.3-beta")
	assert.True(t, match)
	match, _ = re.MatchString("1.2.3-beta.1")
	assert.True(t, match)

	match, _ = re.MatchString("1.2.3-gamma")
	assert.True(t, match)
	match, _ = re.MatchString("1.2.3-gamma.1")
	assert.True(t, match)

	match, _ = re.MatchString("1.2.3-delta")
	assert.True(t, match)
	match, _ = re.MatchString("1.2.3-delta.1")
	assert.True(t, match)

	match, _ = re.MatchString("v1.2.3")
	assert.True(t, match)

	match, _ = re.MatchString("v1.2.3-alpha")
	assert.True(t, match)
	match, _ = re.MatchString("v1.2.3-alpha.1")
	assert.True(t, match)

	match, _ = re.MatchString("v1.2.3-beta")
	assert.True(t, match)
	match, _ = re.MatchString("v1.2.3-beta.1")
	assert.True(t, match)

	match, _ = re.MatchString("v1.2.3-gamma")
	assert.True(t, match)
	match, _ = re.MatchString("v1.2.3-gamma.1")
	assert.True(t, match)

	match, _ = re.MatchString("v1.2.3-delta")
	assert.True(t, match)
	match, _ = re.MatchString("v1.2.3-delta.1")
	assert.True(t, match)
}

func TestReleaseTypesMaturityNegativeFilterTags(t *testing.T) {
	configuration, _ := cnf.NewConfiguration()
	configurationLayer := cnf.NewSimpleConfigurationLayer()
	configurationLayer.SetReleasePrefix(utl.PointerToString("v"))
	var cl cnf.ConfigurationLayer = configurationLayer
	configuration.WithRuntimeConfiguration(&cl)
	state, _ := stt.NewStateWith(configuration)
	flatState, _ := state.Flatten() // we need to flatten the state here to render the expression properly
	rendered, err := tpl.Render(*(*cnf.RELEASE_TYPES_MATURITY).GetFilterTags(), flatState)
	assert.NoError(t, err)
	re, err := regexp2.Compile(rendered, 0)
	assert.NoError(t, err)

	match, _ := re.MatchString("a.b.c")
	assert.False(t, match)

	match, _ = re.MatchString("1.2.3-alphaABC")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-alphaABC.1")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-betaABC")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-betaABC.1")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-gammaABC")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-gammaABC.1")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-deltaABC")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-deltaABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("1.2.3-dvelop")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-dvelop.1")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-dvelopABC")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-dvelopABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("1.2.3-dvelopment")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-dvelopment.1")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-dvelopmentABC")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-dvelopmentABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("1.2.3-beta-1")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-betaABC-1")
	assert.False(t, match)

	match, _ = re.MatchString("va.b.c")
	assert.False(t, match)

	match, _ = re.MatchString("v1.2.3-alphaABC")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-alphaABC.1")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-betaABC")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-betaABC.1")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-gammaABC")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-gammaABC.1")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-deltaABC")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-deltaABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("v1.2.3-dvelop")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-dvelop.1")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-dvelopABC")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-dvelopABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("v1.2.3-alpha-1")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-alphaABC-1")
	assert.False(t, match)

	match, _ = re.MatchString("z1.2.3-alpha")
	assert.False(t, match)
	match, _ = re.MatchString("z1.2.3-alpha.1")
	assert.False(t, match)
	match, _ = re.MatchString("z1.2.3-alphaABC")
	assert.False(t, match)
	match, _ = re.MatchString("z1.2.3-alphaABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("v1.2.3-dvelopment")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-dvelopment.1")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-dvelopmentABC")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-dvelopmentABC.1")
	assert.False(t, match)

	match, _ = re.MatchString("z1.2.3-beta")
	assert.False(t, match)
	match, _ = re.MatchString("z1.2.3-beta.1")
	assert.False(t, match)
	match, _ = re.MatchString("z1.2.3-betaABC")
	assert.False(t, match)
	match, _ = re.MatchString("z1.2.3-betaABC.1")
	assert.False(t, match)
}

func TestReleaseTypesMaturityPositiveMatchBranches(t *testing.T) {
	configuration, _ := cnf.NewConfiguration()
	configurationLayer := cnf.NewSimpleConfigurationLayer()
	configurationLayer.SetReleasePrefix(utl.PointerToString("v"))
	var cl cnf.ConfigurationLayer = configurationLayer
	configuration.WithRuntimeConfiguration(&cl)
	state, _ := stt.NewStateWith(configuration)
	flatState, _ := state.Flatten() // we need to flatten the state here to render the expression properly
	rendered, err := tpl.Render(*(*cnf.RELEASE_TYPES_MATURITY).GetMatchBranches(), flatState)
	assert.NoError(t, err)
	re, err := regexp2.Compile(rendered, 0)
	assert.NoError(t, err)

	match, _ := re.MatchString("alpha")
	assert.True(t, match)
	match, _ = re.MatchString("beta")
	assert.True(t, match)
	match, _ = re.MatchString("gamma")
	assert.True(t, match)
	match, _ = re.MatchString("delta")
	assert.True(t, match)
	match, _ = re.MatchString("epsilon")
	assert.True(t, match)
	match, _ = re.MatchString("zeta")
	assert.True(t, match)
	match, _ = re.MatchString("eta")
	assert.True(t, match)
	match, _ = re.MatchString("theta")
	assert.True(t, match)
	match, _ = re.MatchString("iota")
	assert.True(t, match)
	match, _ = re.MatchString("kappa")
	assert.True(t, match)
	match, _ = re.MatchString("lambda")
	assert.True(t, match)
	match, _ = re.MatchString("mu")
	assert.True(t, match)
	match, _ = re.MatchString("nu")
	assert.True(t, match)
	match, _ = re.MatchString("xi")
	assert.True(t, match)
	match, _ = re.MatchString("omicron")
	assert.True(t, match)
	match, _ = re.MatchString("pi")
	assert.True(t, match)
	match, _ = re.MatchString("rho")
	assert.True(t, match)
	match, _ = re.MatchString("sigma")
	assert.True(t, match)
	match, _ = re.MatchString("tau")
	assert.True(t, match)
	match, _ = re.MatchString("upsilon")
	assert.True(t, match)
	match, _ = re.MatchString("phi")
	assert.True(t, match)
	match, _ = re.MatchString("chi")
	assert.True(t, match)
	match, _ = re.MatchString("psi")
	assert.True(t, match)
	match, _ = re.MatchString("omega")
	assert.True(t, match)
}

func TestReleaseTypesMaturityNegativeMatchBranches(t *testing.T) {
	configuration, _ := cnf.NewConfiguration()
	configurationLayer := cnf.NewSimpleConfigurationLayer()
	configurationLayer.SetReleasePrefix(utl.PointerToString("v"))
	var cl cnf.ConfigurationLayer = configurationLayer
	configuration.WithRuntimeConfiguration(&cl)
	state, _ := stt.NewStateWith(configuration)
	flatState, _ := state.Flatten() // we need to flatten the state here to render the expression properly
	rendered, err := tpl.Render(*(*cnf.RELEASE_TYPES_MATURITY).GetMatchBranches(), flatState)
	assert.NoError(t, err)
	re, err := regexp2.Compile(rendered, 0)
	assert.NoError(t, err)

	match, _ := re.MatchString("a")
	assert.False(t, match)
	match, _ = re.MatchString("alph")
	assert.False(t, match)

	match, _ = re.MatchString("alphaa")
	assert.False(t, match)
	match, _ = re.MatchString("betaa")
	assert.False(t, match)
	match, _ = re.MatchString("gammaa")
	assert.False(t, match)
	match, _ = re.MatchString("deltaa")
	assert.False(t, match)
	match, _ = re.MatchString("epsilonn")
	assert.False(t, match)
	match, _ = re.MatchString("zetaa")
	assert.False(t, match)
	match, _ = re.MatchString("etaa")
	assert.False(t, match)
	match, _ = re.MatchString("thetaa")
	assert.False(t, match)
	match, _ = re.MatchString("iotaa")
	assert.False(t, match)
	match, _ = re.MatchString("kappaa")
	assert.False(t, match)
	match, _ = re.MatchString("lambdaa")
	assert.False(t, match)
	match, _ = re.MatchString("muu")
	assert.False(t, match)
	match, _ = re.MatchString("nuu")
	assert.False(t, match)
	match, _ = re.MatchString("xii")
	assert.False(t, match)
	match, _ = re.MatchString("omicronn")
	assert.False(t, match)
	match, _ = re.MatchString("pii")
	assert.False(t, match)
	match, _ = re.MatchString("rhoo")
	assert.False(t, match)
	match, _ = re.MatchString("sigmaa")
	assert.False(t, match)
	match, _ = re.MatchString("tauu")
	assert.False(t, match)
	match, _ = re.MatchString("upsilonn")
	assert.False(t, match)
	match, _ = re.MatchString("phii")
	assert.False(t, match)
	match, _ = re.MatchString("chii")
	assert.False(t, match)
	match, _ = re.MatchString("psii")
	assert.False(t, match)
	match, _ = re.MatchString("omegaa")
	assert.False(t, match)

	match, _ = re.MatchString("ALPHA")
	assert.False(t, match)
}

func TestReleaseTypesReleasePositiveFilterTags(t *testing.T) {
	/*configuration, _ := cnf.NewConfiguration()
		configurationLayer := cnf.NewSimpleConfigurationLayer()
		configurationLayer.SetReleasePrefix(utl.PointerToString("v"))
		var cl cnf.ConfigurationLayer = configurationLayer
		configuration.WithRuntimeConfiguration(&cl)
		state, _ := stt.NewStateWith(configuration)
		flatState, _ := state.Flatten() // we need to flatten the state here to render the expression properly
		rendered, err := tpl.Render(*(*cnf.RELEASE_TYPES_RELEASE).GetFilterTags(), flatState)
		assert.NoError(t, err)
		re, err := regexp2.Compile(rendered, 0)
		assert.NoError(t, err)

	                //match, _ := re.MatchString("1.2.3")
		            //assert.True(t, match)*/
}

func TestReleaseTypesReleaseNegativeFilterTags(t *testing.T) {
	configuration, _ := cnf.NewConfiguration()
	configurationLayer := cnf.NewSimpleConfigurationLayer()
	configurationLayer.SetReleasePrefix(utl.PointerToString("v"))
	var cl cnf.ConfigurationLayer = configurationLayer
	configuration.WithRuntimeConfiguration(&cl)
	state, _ := stt.NewStateWith(configuration)
	flatState, _ := state.Flatten() // we need to flatten the state here to render the expression properly
	rendered, err := tpl.Render(*(*cnf.RELEASE_TYPES_RELEASE).GetFilterTags(), flatState)
	assert.NoError(t, err)
	re, err := regexp2.Compile(rendered, 0)
	assert.NoError(t, err)

	match, _ := re.MatchString("1.2.3")
	assert.False(t, match)
	match, _ = re.MatchString("a.b.c")
	assert.False(t, match)

	match, _ = re.MatchString("1.2.3-a")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3-a.1")
	assert.False(t, match)

	match, _ = re.MatchString("va.b.c")
	assert.False(t, match)

	match, _ = re.MatchString("v1.2.3-a")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3-a.1")
	assert.False(t, match)
}

func TestReleaseTypesReleasePositiveMatchBranches(t *testing.T) {
	configuration, _ := cnf.NewConfiguration()
	configurationLayer := cnf.NewSimpleConfigurationLayer()
	configurationLayer.SetReleasePrefix(utl.PointerToString("v"))
	var cl cnf.ConfigurationLayer = configurationLayer
	configuration.WithRuntimeConfiguration(&cl)
	state, _ := stt.NewStateWith(configuration)
	flatState, _ := state.Flatten() // we need to flatten the state here to render the expression properly
	rendered, err := tpl.Render(*(*cnf.RELEASE_TYPES_RELEASE).GetMatchBranches(), flatState)
	assert.NoError(t, err)
	re, err := regexp2.Compile(rendered, 0)
	assert.NoError(t, err)

	match, _ := re.MatchString("rel-1")
	assert.True(t, match)
	match, _ = re.MatchString("rel-1.x")
	assert.True(t, match)
	match, _ = re.MatchString("rel-1.x.x")
	assert.True(t, match)
	match, _ = re.MatchString("rel-12")
	assert.True(t, match)
	match, _ = re.MatchString("rel-12.x")
	assert.True(t, match)
	match, _ = re.MatchString("rel-12.x.x")
	assert.True(t, match)
	match, _ = re.MatchString("rel-1.2")
	assert.True(t, match)
	match, _ = re.MatchString("rel-1.2.x")
	assert.True(t, match)
	match, _ = re.MatchString("rel-12")
	assert.True(t, match)
	match, _ = re.MatchString("rel-12.22")
	assert.True(t, match)
	match, _ = re.MatchString("rel-12.22.x")
	assert.True(t, match)
	match, _ = re.MatchString("rel-1.2.3")
	assert.True(t, match)
	match, _ = re.MatchString("rel-12.22.33")
	assert.True(t, match)
	match, _ = re.MatchString("rel-v1")
	assert.True(t, match)
	match, _ = re.MatchString("rel-v1.x")
	assert.True(t, match)
	match, _ = re.MatchString("rel-v1.x.x")
	assert.True(t, match)
	match, _ = re.MatchString("rel-v12")
	assert.True(t, match)
	match, _ = re.MatchString("rel-v12.x")
	assert.True(t, match)
	match, _ = re.MatchString("rel-v12.x.x")
	assert.True(t, match)
	match, _ = re.MatchString("rel-v1.2")
	assert.True(t, match)
	match, _ = re.MatchString("rel-v1.2.x")
	assert.True(t, match)
	match, _ = re.MatchString("rel-v12")
	assert.True(t, match)
	match, _ = re.MatchString("rel-v12.22")
	assert.True(t, match)
	match, _ = re.MatchString("rel-v12.22.x")
	assert.True(t, match)
	match, _ = re.MatchString("rel-v1.2.3")
	assert.True(t, match)
	match, _ = re.MatchString("rel-v12.22.33")
	assert.True(t, match)

	match, _ = re.MatchString("rel/1")
	assert.True(t, match)
	match, _ = re.MatchString("rel/1.x")
	assert.True(t, match)
	match, _ = re.MatchString("rel/1.x.x")
	assert.True(t, match)
	match, _ = re.MatchString("rel/12")
	assert.True(t, match)
	match, _ = re.MatchString("rel/12.x")
	assert.True(t, match)
	match, _ = re.MatchString("rel/12.x.x")
	assert.True(t, match)
	match, _ = re.MatchString("rel/1.2")
	assert.True(t, match)
	match, _ = re.MatchString("rel/1.2.x")
	assert.True(t, match)
	match, _ = re.MatchString("rel/12")
	assert.True(t, match)
	match, _ = re.MatchString("rel/12.22")
	assert.True(t, match)
	match, _ = re.MatchString("rel/12.22.x")
	assert.True(t, match)
	match, _ = re.MatchString("rel/1.2.3")
	assert.True(t, match)
	match, _ = re.MatchString("rel/12.22.33")
	assert.True(t, match)
	match, _ = re.MatchString("rel/v1")
	assert.True(t, match)
	match, _ = re.MatchString("rel/v1.x")
	assert.True(t, match)
	match, _ = re.MatchString("rel/v1.x.x")
	assert.True(t, match)
	match, _ = re.MatchString("rel/v12")
	assert.True(t, match)
	match, _ = re.MatchString("rel/v12.x")
	assert.True(t, match)
	match, _ = re.MatchString("rel/v12.x.x")
	assert.True(t, match)
	match, _ = re.MatchString("rel/v1.2")
	assert.True(t, match)
	match, _ = re.MatchString("rel/v1.2.x")
	assert.True(t, match)
	match, _ = re.MatchString("rel/v12")
	assert.True(t, match)
	match, _ = re.MatchString("rel/v12.22")
	assert.True(t, match)
	match, _ = re.MatchString("rel/v12.22.x")
	assert.True(t, match)
	match, _ = re.MatchString("rel/v1.2.3")
	assert.True(t, match)
	match, _ = re.MatchString("rel/v12.22.33")
	assert.True(t, match)

	match, _ = re.MatchString("release-1")
	assert.True(t, match)
	match, _ = re.MatchString("release-1.x")
	assert.True(t, match)
	match, _ = re.MatchString("release-1.x.x")
	assert.True(t, match)
	match, _ = re.MatchString("release-12")
	assert.True(t, match)
	match, _ = re.MatchString("release-12.x")
	assert.True(t, match)
	match, _ = re.MatchString("release-12.x.x")
	assert.True(t, match)
	match, _ = re.MatchString("release-1.2")
	assert.True(t, match)
	match, _ = re.MatchString("release-1.2.x")
	assert.True(t, match)
	match, _ = re.MatchString("release-12")
	assert.True(t, match)
	match, _ = re.MatchString("release-12.22")
	assert.True(t, match)
	match, _ = re.MatchString("release-12.22.x")
	assert.True(t, match)
	match, _ = re.MatchString("release-1.2.3")
	assert.True(t, match)
	match, _ = re.MatchString("release-12.22.33")
	assert.True(t, match)
	match, _ = re.MatchString("release-v1")
	assert.True(t, match)
	match, _ = re.MatchString("release-v1.x")
	assert.True(t, match)
	match, _ = re.MatchString("release-v1.x.x")
	assert.True(t, match)
	match, _ = re.MatchString("release-v12")
	assert.True(t, match)
	match, _ = re.MatchString("release-v12.x")
	assert.True(t, match)
	match, _ = re.MatchString("release-v12.x.x")
	assert.True(t, match)
	match, _ = re.MatchString("release-v1.2")
	assert.True(t, match)
	match, _ = re.MatchString("release-v1.2.x")
	assert.True(t, match)
	match, _ = re.MatchString("release-v12")
	assert.True(t, match)
	match, _ = re.MatchString("release-v12.22")
	assert.True(t, match)
	match, _ = re.MatchString("release-v12.22.x")
	assert.True(t, match)
	match, _ = re.MatchString("release-v1.2.3")
	assert.True(t, match)
	match, _ = re.MatchString("release-v12.22.33")
	assert.True(t, match)

	match, _ = re.MatchString("release/1")
	assert.True(t, match)
	match, _ = re.MatchString("release/1.x")
	assert.True(t, match)
	match, _ = re.MatchString("release/1.x.x")
	assert.True(t, match)
	match, _ = re.MatchString("release/12")
	assert.True(t, match)
	match, _ = re.MatchString("release/12.x")
	assert.True(t, match)
	match, _ = re.MatchString("release/12.x.x")
	assert.True(t, match)
	match, _ = re.MatchString("release/1.2")
	assert.True(t, match)
	match, _ = re.MatchString("release/1.2.x")
	assert.True(t, match)
	match, _ = re.MatchString("release/12")
	assert.True(t, match)
	match, _ = re.MatchString("release/12.22")
	assert.True(t, match)
	match, _ = re.MatchString("release/12.22.x")
	assert.True(t, match)
	match, _ = re.MatchString("release/1.2.3")
	assert.True(t, match)
	match, _ = re.MatchString("release/12.22.33")
	assert.True(t, match)
	match, _ = re.MatchString("release/v1")
	assert.True(t, match)
	match, _ = re.MatchString("release/v1.x")
	assert.True(t, match)
	match, _ = re.MatchString("release/v1.x.x")
	assert.True(t, match)
	match, _ = re.MatchString("release/v12")
	assert.True(t, match)
	match, _ = re.MatchString("release/v12.x")
	assert.True(t, match)
	match, _ = re.MatchString("release/v12.x.x")
	assert.True(t, match)
	match, _ = re.MatchString("release/v1.2")
	assert.True(t, match)
	match, _ = re.MatchString("release/v1.2.x")
	assert.True(t, match)
	match, _ = re.MatchString("release/v12")
	assert.True(t, match)
	match, _ = re.MatchString("release/v12.22")
	assert.True(t, match)
	match, _ = re.MatchString("release/v12.22.x")
	assert.True(t, match)
	match, _ = re.MatchString("release/v1.2.3")
	assert.True(t, match)
	match, _ = re.MatchString("release/v12.22.33")
	assert.True(t, match)
}

func TestReleaseTypesReleaseNegativeMatchBranches(t *testing.T) {
	configuration, _ := cnf.NewConfiguration()
	configurationLayer := cnf.NewSimpleConfigurationLayer()
	configurationLayer.SetReleasePrefix(utl.PointerToString("v"))
	var cl cnf.ConfigurationLayer = configurationLayer
	configuration.WithRuntimeConfiguration(&cl)
	state, _ := stt.NewStateWith(configuration)
	flatState, _ := state.Flatten() // we need to flatten the state here to render the expression properly
	rendered, err := tpl.Render(*(*cnf.RELEASE_TYPES_RELEASE).GetMatchBranches(), flatState)
	assert.NoError(t, err)
	re, err := regexp2.Compile(rendered, 0)
	assert.NoError(t, err)

	match, _ := re.MatchString("")
	assert.False(t, match)
	match, _ = re.MatchString("v")
	assert.False(t, match)
	match, _ = re.MatchString("vv")
	assert.False(t, match)
	match, _ = re.MatchString("1.a")
	assert.False(t, match)
	match, _ = re.MatchString("1.a.b")
	assert.False(t, match)
	match, _ = re.MatchString("1,x")
	assert.False(t, match)
	match, _ = re.MatchString("1,x,x")
	assert.False(t, match)
	match, _ = re.MatchString("1.x.x.")
	assert.False(t, match)
	match, _ = re.MatchString("1.x.x.x")
	assert.False(t, match)
	match, _ = re.MatchString("v1.a")
	assert.False(t, match)
	match, _ = re.MatchString("v1.a.b")
	assert.False(t, match)
	match, _ = re.MatchString("v1,x")
	assert.False(t, match)
	match, _ = re.MatchString("v1,x,x")
	assert.False(t, match)
	match, _ = re.MatchString("v1.x.x.")
	assert.False(t, match)
	match, _ = re.MatchString("v1.x.x.x")
	assert.False(t, match)
	match, _ = re.MatchString("1.2.3.x")
	assert.False(t, match)
	match, _ = re.MatchString("v1.2.3.x")
	assert.False(t, match)

	match, _ = re.MatchString("r-1")
	assert.False(t, match)
	match, _ = re.MatchString("re-1.x")
	assert.False(t, match)
	match, _ = re.MatchString("rell-1.x.x")
	assert.False(t, match)
	match, _ = re.MatchString("rel.12")
	assert.False(t, match)
	match, _ = re.MatchString("rel:12.x")
	assert.False(t, match)
	match, _ = re.MatchString("rel12.x.x")
	assert.False(t, match)

	match, _ = re.MatchString("r/1")
	assert.False(t, match)
	match, _ = re.MatchString("re/1.x")
	assert.False(t, match)
	match, _ = re.MatchString("rell/1.x.x")
	assert.False(t, match)
	match, _ = re.MatchString("rel.12")
	assert.False(t, match)
	match, _ = re.MatchString("rel:12.x")
	assert.False(t, match)
	match, _ = re.MatchString("rel12.x.x")
	assert.False(t, match)

	match, _ = re.MatchString("releasee-1")
	assert.False(t, match)

	match, _ = re.MatchString("releasee/1")
	assert.False(t, match)
}
