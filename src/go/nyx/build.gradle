/*------------------------------------------------------------------------------
  Plugins DSL block
  https://docs.gradle.org/current/userguide/plugins.html#sec:plugins_block
------------------------------------------------------------------------------*/
plugins {
}

/*------------------------------------------------------------------------------
  Local sub-project properties
------------------------------------------------------------------------------*/
description = 'The Nyx main library and entry point.'
ext { 
  modulePath = 'github.com/mooltiverse/nyx/src/go/nyx'

  // The list of maps of target platforms (taken from https://go.dev/doc/install/source#environment)
  // For each item you have a sub list with 3 elements: the Operating System, the Architecture, the expected Extension of executable files
  targetPlatforms = [ ['darwin','amd64',''],
                      ['darwin','arm64',''],
                      ['dragonfly','amd64',''],
                      ['freebsd','386',''],
                      ['freebsd','amd64',''],
                      ['freebsd','arm',''],
                      ['linux','386',''],
                      ['linux','amd64',''],
                      ['linux','arm',''],
                      ['linux','arm64',''],
                      ['linux','ppc64',''],
                      ['linux','ppc64le',''],
                      ['linux','mips',''],
                      ['linux','mipsle',''],
                      ['linux','mips64',''],
                      ['linux','mips64le',''],
                      ['netbsd','386',''],
                      ['netbsd','amd64',''],
                      ['netbsd','arm',''],
                      ['openbsd','386',''],
                      ['openbsd','amd64',''],
                      ['openbsd','arm',''],
                      ['openbsd','arm64',''],
                      ['solaris','amd64',''],
                      ['windows','386','.exe'],
                      ['windows','amd64','.exe'],
                      ['windows','arm','.exe'],
                      ['windows','arm64','.exe'] ]
}

/*------------------------------------------------------------------------------
  Configurations
------------------------------------------------------------------------------*/
configurations {
}

/*------------------------------------------------------------------------------
  Repositories and dependencies
  https://docs.gradle.org/current/userguide/dependency_management_for_java_projects.html
*/
dependencies {
}

/*------------------------------------------------------------------------------
  Extension configurations
------------------------------------------------------------------------------*/
// Configure SonarCloud
// See: https://docs.sonarcloud.io/advanced-setup/ci-based-analysis/sonarscanner-for-gradle/
sonarqube {
    properties {
        property "sonar.projectKey", "mooltiverse_nyx_go_nyx"
        property "sonar.go.file.suffixes", ".go"
        property "sonar.sources", "."
        property "sonar.tests", "."
        property "sonar.exclusions", "**/*_test.go,test/integration/,test/functional/"
        property "sonar.test.inclusions", "**/*_test.go,test/integration/,test/functional/"
        property "sonar.go.coverage.reportPaths", "$buildDir/test-results/test/test-coverprofile.out,$buildDir/test-results/integrationTest/integrationTest-coverprofile.out,$buildDir/test-results/functionalTest/functionalTest-coverprofile.out"
    }
}

/*------------------------------------------------------------------------------
  Additional tasks
------------------------------------------------------------------------------*/
// Create a build task for the specific binary for each target platform
targetPlatforms.each { platformItem ->
    def os = platformItem[0]
    def arch = platformItem[1]
    def extension = platformItem[2]
    def platform = os+'-'+arch
    def binaryName = rootProject.name+'-'+platform
    def binaryFile = file(buildDir.path+'/bin/'+binaryName+extension)

    // The build task for the specific platform
    tasks.create(group: 'build', name: "goBuild-${binaryName}", description: "Builds the ${binaryName} binary file") {
        // Task dependencies
        dependsOn goInit
        
        // Declare inputs and outputs of this task
        inputs.files(fileTree(projectDir).filter { File f ->
            f.name.endsWith(".go") || f.name.endsWith(".mod") || f.name.endsWith(".sum")
        })
        outputs.file(binaryFile)

        // See https://golang.org/doc/install/source#environment for variables determining the build platform ans OS
        doLast {
            logger.info('Building Go binaries for '+platform+' to '+binaryFile)
            exec {
                environment 'GOOS', os
                environment 'GOARCH', arch
                environment 'CGO_ENABLED', "0" // disable CGO for the binary to run on Alpine Linux, which requires full static linking
                workingDir = "$projectDir/main"
                logging.captureStandardOutput LogLevel.QUIET
                logging.captureStandardError  LogLevel.ERROR
                // if this fails when using the Gradle wrapper you may need to run './gradlew --stop' first in order to get it running again
                commandLine 'go', 'build', '-o', binaryFile, '-ldflags=.="-X=main.release='+rootProject.version+'"', modulePath+'/main'
            }
        }
    }

    // Make the overall goBuild lifecycle task depend on the platform specific build task
    tasks.goBuild.dependsOn tasks.named("goBuild-${binaryName}")
}

/*------------------------------------------------------------------------------
  Additional task dependencies
------------------------------------------------------------------------------*/
