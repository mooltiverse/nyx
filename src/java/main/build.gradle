/*------------------------------------------------------------------------------
  Plugins DSL block
  https://docs.gradle.org/current/userguide/plugins.html#sec:plugins_block
------------------------------------------------------------------------------*/
plugins {
  id 'java-library'         // See: https://docs.gradle.org/current/userguide/java_library_plugin.html
}

/*------------------------------------------------------------------------------
  Local sub-project properties
------------------------------------------------------------------------------*/
description = 'The Nyx Java main binaries'

/*------------------------------------------------------------------------------
  Configurations
------------------------------------------------------------------------------*/
configurations {
  // Create new configurations used by other projects to use classes from this project.
  // In particular we need the Git scripts (in the test source set) to be available for other projects.
  // This is actually not trivial and we had to follow directions from this post:
  // - https://softnoise.wordpress.com/2014/09/07/gradle-sub-project-test-dependencies-in-multi-project-builds/
  integrationTestExport.extendsFrom(integrationTestRuntimeOnly)
  functionalTestExport.extendsFrom(functionalTestRuntimeOnly)
}

/*------------------------------------------------------------------------------
  Dependencies
  https://docs.gradle.org/current/userguide/dependency_management_for_java_projects.html
------------------------------------------------------------------------------*/
dependencies {
  // Import dependencies from other modules of this project
  api                   project(':src:java:version')
  implementation        'org.slf4j:slf4j-api:2.0.16'                                               // SLF4J API (http://www.slf4j.org/)
  implementation        'org.eclipse.jgit:org.eclipse.jgit:7.0.0.202409031743-r'                   // JGit (https://www.eclipse.org/jgit/)
  implementation        'org.eclipse.jgit:org.eclipse.jgit.ssh.jsch:7.0.0.202409031743-r'          // JGit JSch extension (https://www.eclipse.org/jgit/)
  implementation        'com.github.mwiede:jsch:0.2.21'                                            // JSch SSH2 Java library (https://github.com/mwiede/jsch)
  implementation        'com.fasterxml.jackson.core:jackson-databind:2.18.1'                       // Jackson JSON library (https://github.com/FasterXML/jackson)
  implementation        'com.fasterxml.jackson.core:jackson-annotations:2.18.1'                    // Jackson JSON library (https://github.com/FasterXML/jackson)
  implementation        'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.18.1'          // Jackson YAML library (https://github.com/FasterXML/jackson-dataformats-text/tree/master/yaml)
  implementation        'com.github.jknack:handlebars:4.4.0'                                       // Handlebars library (https://github.com/jknack/handlebars.java)
  implementation        'org.kohsuke:github-api:1.326'                                             // GitHub API client Java library (https://github-api.kohsuke.org/)
  // Bouncycastle is used by JSch to provide support for certain key types when running on older JVMs (see: https://github.com/mwiede/jsch#faq).
  // JVMs from 15 on don't need Bouncycastle.
  runtimeOnly           'org.bouncycastle:bcprov-jdk18on:1.79'                                     // Bouncycastle (https://www.bouncycastle.org/), (https://repo1.maven.org/maven2/org/bouncycastle/bcprov-jdk18on/)
  
  // See the 'integrationTestExport' and 'functionalTestExport' above about this
  integrationTestExport  sourceSets.integrationTest.output
  functionalTestExport   sourceSets.functionalTest.output
}

/*------------------------------------------------------------------------------
  Extension configurations
------------------------------------------------------------------------------*/
// Additional test sets created using the 'jvm-test-suite'
// These tests are better isolated from unit tests (in the src/test directory of each sub project)
// as they may take longer.
testing {
  suites {
    // This is the built-in suite
    test {
      targets {
        all { 
          testTask.configure {
            // Pass the name of the configuration file examples to tests.
            // We use the same files used for the documentation here.
            systemProperty 'extendedJSONExampleConfigurationFile', file("$rootDir/docs/main/docs/_includes/.nyx-extended.json").absolutePath
            systemProperty 'mediumJSONExampleConfigurationFile', file("$rootDir/docs/main/docs/_includes/.nyx-medium.json").absolutePath
            systemProperty 'simpleJSONExampleConfigurationFile', file("$rootDir/docs/main/docs/_includes/.nyx-simple.json").absolutePath
            systemProperty 'simplestJSONExampleConfigurationFile', file("$rootDir/docs/main/docs/_includes/.nyx-simplest.json").absolutePath
            systemProperty 'extendedYAMLExampleConfigurationFile', file("$rootDir/docs/main/docs/_includes/.nyx-extended.yaml").absolutePath
            systemProperty 'mediumYAMLExampleConfigurationFile', file("$rootDir/docs/main/docs/_includes/.nyx-medium.yaml").absolutePath
            systemProperty 'simpleYAMLExampleConfigurationFile', file("$rootDir/docs/main/docs/_includes/.nyx-simple.yaml").absolutePath
            systemProperty 'simplestYAMLExampleConfigurationFile', file("$rootDir/docs/main/docs/_includes/.nyx-simplest.yaml").absolutePath
          }
        }
      }
    }

    // Integration tests can be implemented in the directory src/integrationTest/[java|groovy]
    integrationTest(JvmTestSuite) {
      // Here we can configure additional dependencies, properties and options for these tests
    }

    // Functional tests can be implemented in the directory src/functionalTest/[java|groovy]
    functionalTest(JvmTestSuite) {
      // Here we can configure additional dependencies, properties and options for these tests
    }
  }
}
